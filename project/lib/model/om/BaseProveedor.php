<?php

/**
 * Base class that represents a row from the 'proveedor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jan 12 14:28:40 2010
 *
 * @package    lib.model.om
 */
abstract class BaseProveedor extends BaseObject  implements Persistent {


  const PEER = 'ProveedorPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProveedorPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the cuit field.
	 * @var        string
	 */
	protected $cuit;

	/**
	 * The value for the rubro_id field.
	 * @var        int
	 */
	protected $rubro_id;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the movil field.
	 * @var        string
	 */
	protected $movil;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the persona_nombre field.
	 * @var        string
	 */
	protected $persona_nombre;

	/**
	 * The value for the persona_apellido field.
	 * @var        string
	 */
	protected $persona_apellido;

	/**
	 * The value for the direccion_calle field.
	 * @var        string
	 */
	protected $direccion_calle;

	/**
	 * The value for the direccion_numero field.
	 * @var        string
	 */
	protected $direccion_numero;

	/**
	 * The value for the direccion_manzana field.
	 * @var        string
	 */
	protected $direccion_manzana;

	/**
	 * The value for the direccion_barrio field.
	 * @var        string
	 */
	protected $direccion_barrio;

	/**
	 * The value for the direccion_piso field.
	 * @var        string
	 */
	protected $direccion_piso;

	/**
	 * The value for the direccion_depto field.
	 * @var        string
	 */
	protected $direccion_depto;

	/**
	 * The value for the localidad_id field.
	 * @var        int
	 */
	protected $localidad_id;

	/**
	 * The value for the provincia_id field.
	 * @var        int
	 */
	protected $provincia_id;

	/**
	 * @var        ProveedorRubro
	 */
	protected $aProveedorRubro;

	/**
	 * @var        Localidad
	 */
	protected $aLocalidad;

	/**
	 * @var        Provincia
	 */
	protected $aProvincia;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedByProveedorId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedByProveedorId.
	 */
	private $lastNotaPedidoRelatedByProveedorIdCriteria = null;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedByTransporteId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedByTransporteId.
	 */
	private $lastNotaPedidoRelatedByTransporteIdCriteria = null;

	/**
	 * @var        array Compra[] Collection to store aggregation of Compra objects.
	 */
	protected $collCompras;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompras.
	 */
	private $lastCompraCriteria = null;

	/**
	 * @var        array Venta[] Collection to store aggregation of Venta objects.
	 */
	protected $collVentas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVentas.
	 */
	private $lastVentaCriteria = null;

	/**
	 * @var        array RecepcionPedido[] Collection to store aggregation of RecepcionPedido objects.
	 */
	protected $collRecepcionPedidos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecepcionPedidos.
	 */
	private $lastRecepcionPedidoCriteria = null;

	/**
	 * @var        array ProductoProveedor[] Collection to store aggregation of ProductoProveedor objects.
	 */
	protected $collProductoProveedors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProductoProveedors.
	 */
	private $lastProductoProveedorCriteria = null;

	/**
	 * @var        array ProveedorFDP[] Collection to store aggregation of ProveedorFDP objects.
	 */
	protected $collProveedorFDPs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProveedorFDPs.
	 */
	private $lastProveedorFDPCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseProveedor object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * Nombre del Proveedor (255)
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [cuit] column value.
	 * Cuit del Proveedor (50)
	 * @return     string
	 */
	public function getCuit()
	{
		return $this->cuit;
	}

	/**
	 * Get the [rubro_id] column value.
	 * 
	 * @return     int
	 */
	public function getRubroId()
	{
		return $this->rubro_id;
	}

	/**
	 * Get the [telefono] column value.
	 * Telefono del Proveedor (100)
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [fax] column value.
	 * Fax del Proveedor (100)
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [movil] column value.
	 * Celular del Proveedor (100)
	 * @return     string
	 */
	public function getMovil()
	{
		return $this->movil;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [persona_nombre] column value.
	 * Nombre de la persona de contacto del proveedor (100)
	 * @return     string
	 */
	public function getPersonaNombre()
	{
		return $this->persona_nombre;
	}

	/**
	 * Get the [persona_apellido] column value.
	 * Apellido de la persona de contacto del proveedor (100)
	 * @return     string
	 */
	public function getPersonaApellido()
	{
		return $this->persona_apellido;
	}

	/**
	 * Get the [direccion_calle] column value.
	 * Direccioon / Calle del Proveedor (50)
	 * @return     string
	 */
	public function getDireccionCalle()
	{
		return $this->direccion_calle;
	}

	/**
	 * Get the [direccion_numero] column value.
	 * Direccioon / Numero de Calle del Proveedor (2)
	 * @return     string
	 */
	public function getDireccionNumero()
	{
		return $this->direccion_numero;
	}

	/**
	 * Get the [direccion_manzana] column value.
	 * Direccioon / Manzana del Proveedor (5)
	 * @return     string
	 */
	public function getDireccionManzana()
	{
		return $this->direccion_manzana;
	}

	/**
	 * Get the [direccion_barrio] column value.
	 * Direccioon / Barrio del Proveedor (50)
	 * @return     string
	 */
	public function getDireccionBarrio()
	{
		return $this->direccion_barrio;
	}

	/**
	 * Get the [direccion_piso] column value.
	 * Direccioon / Piso del Proveedor (2)
	 * @return     string
	 */
	public function getDireccionPiso()
	{
		return $this->direccion_piso;
	}

	/**
	 * Get the [direccion_depto] column value.
	 * Direccioon / Departamento del Proveedor (2)
	 * @return     string
	 */
	public function getDireccionDepto()
	{
		return $this->direccion_depto;
	}

	/**
	 * Get the [localidad_id] column value.
	 * 
	 * @return     int
	 */
	public function getLocalidadId()
	{
		return $this->localidad_id;
	}

	/**
	 * Get the [provincia_id] column value.
	 * 
	 * @return     int
	 */
	public function getProvinciaId()
	{
		return $this->provincia_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProveedorPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * Nombre del Proveedor (255)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = ProveedorPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [cuit] column.
	 * Cuit del Proveedor (50)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setCuit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cuit !== $v) {
			$this->cuit = $v;
			$this->modifiedColumns[] = ProveedorPeer::CUIT;
		}

		return $this;
	} // setCuit()

	/**
	 * Set the value of [rubro_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setRubroId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rubro_id !== $v) {
			$this->rubro_id = $v;
			$this->modifiedColumns[] = ProveedorPeer::RUBRO_ID;
		}

		if ($this->aProveedorRubro !== null && $this->aProveedorRubro->getId() !== $v) {
			$this->aProveedorRubro = null;
		}

		return $this;
	} // setRubroId()

	/**
	 * Set the value of [telefono] column.
	 * Telefono del Proveedor (100)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = ProveedorPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [fax] column.
	 * Fax del Proveedor (100)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = ProveedorPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [movil] column.
	 * Celular del Proveedor (100)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setMovil($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->movil !== $v) {
			$this->movil = $v;
			$this->modifiedColumns[] = ProveedorPeer::MOVIL;
		}

		return $this;
	} // setMovil()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ProveedorPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [persona_nombre] column.
	 * Nombre de la persona de contacto del proveedor (100)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setPersonaNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->persona_nombre !== $v) {
			$this->persona_nombre = $v;
			$this->modifiedColumns[] = ProveedorPeer::PERSONA_NOMBRE;
		}

		return $this;
	} // setPersonaNombre()

	/**
	 * Set the value of [persona_apellido] column.
	 * Apellido de la persona de contacto del proveedor (100)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setPersonaApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->persona_apellido !== $v) {
			$this->persona_apellido = $v;
			$this->modifiedColumns[] = ProveedorPeer::PERSONA_APELLIDO;
		}

		return $this;
	} // setPersonaApellido()

	/**
	 * Set the value of [direccion_calle] column.
	 * Direccioon / Calle del Proveedor (50)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionCalle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_calle !== $v) {
			$this->direccion_calle = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_CALLE;
		}

		return $this;
	} // setDireccionCalle()

	/**
	 * Set the value of [direccion_numero] column.
	 * Direccioon / Numero de Calle del Proveedor (2)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionNumero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_numero !== $v) {
			$this->direccion_numero = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_NUMERO;
		}

		return $this;
	} // setDireccionNumero()

	/**
	 * Set the value of [direccion_manzana] column.
	 * Direccioon / Manzana del Proveedor (5)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionManzana($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_manzana !== $v) {
			$this->direccion_manzana = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_MANZANA;
		}

		return $this;
	} // setDireccionManzana()

	/**
	 * Set the value of [direccion_barrio] column.
	 * Direccioon / Barrio del Proveedor (50)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionBarrio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_barrio !== $v) {
			$this->direccion_barrio = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_BARRIO;
		}

		return $this;
	} // setDireccionBarrio()

	/**
	 * Set the value of [direccion_piso] column.
	 * Direccioon / Piso del Proveedor (2)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionPiso($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_piso !== $v) {
			$this->direccion_piso = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_PISO;
		}

		return $this;
	} // setDireccionPiso()

	/**
	 * Set the value of [direccion_depto] column.
	 * Direccioon / Departamento del Proveedor (2)
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccionDepto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion_depto !== $v) {
			$this->direccion_depto = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION_DEPTO;
		}

		return $this;
	} // setDireccionDepto()

	/**
	 * Set the value of [localidad_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setLocalidadId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->localidad_id !== $v) {
			$this->localidad_id = $v;
			$this->modifiedColumns[] = ProveedorPeer::LOCALIDAD_ID;
		}

		if ($this->aLocalidad !== null && $this->aLocalidad->getId() !== $v) {
			$this->aLocalidad = null;
		}

		return $this;
	} // setLocalidadId()

	/**
	 * Set the value of [provincia_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setProvinciaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->provincia_id !== $v) {
			$this->provincia_id = $v;
			$this->modifiedColumns[] = ProveedorPeer::PROVINCIA_ID;
		}

		if ($this->aProvincia !== null && $this->aProvincia->getId() !== $v) {
			$this->aProvincia = null;
		}

		return $this;
	} // setProvinciaId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->cuit = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->rubro_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->telefono = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->fax = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->movil = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->persona_nombre = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->persona_apellido = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->direccion_calle = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->direccion_numero = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->direccion_manzana = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->direccion_barrio = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->direccion_piso = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->direccion_depto = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->localidad_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->provincia_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = ProveedorPeer::NUM_COLUMNS - ProveedorPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Proveedor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProveedorRubro !== null && $this->rubro_id !== $this->aProveedorRubro->getId()) {
			$this->aProveedorRubro = null;
		}
		if ($this->aLocalidad !== null && $this->localidad_id !== $this->aLocalidad->getId()) {
			$this->aLocalidad = null;
		}
		if ($this->aProvincia !== null && $this->provincia_id !== $this->aProvincia->getId()) {
			$this->aProvincia = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProveedorPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProveedorRubro = null;
			$this->aLocalidad = null;
			$this->aProvincia = null;
			$this->collNotaPedidosRelatedByProveedorId = null;
			$this->lastNotaPedidoRelatedByProveedorIdCriteria = null;

			$this->collNotaPedidosRelatedByTransporteId = null;
			$this->lastNotaPedidoRelatedByTransporteIdCriteria = null;

			$this->collCompras = null;
			$this->lastCompraCriteria = null;

			$this->collVentas = null;
			$this->lastVentaCriteria = null;

			$this->collRecepcionPedidos = null;
			$this->lastRecepcionPedidoCriteria = null;

			$this->collProductoProveedors = null;
			$this->lastProductoProveedorCriteria = null;

			$this->collProveedorFDPs = null;
			$this->lastProveedorFDPCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProveedor:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ProveedorPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseProveedor:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseProveedor:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseProveedor:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ProveedorPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProveedorRubro !== null) {
				if ($this->aProveedorRubro->isModified() || $this->aProveedorRubro->isNew()) {
					$affectedRows += $this->aProveedorRubro->save($con);
				}
				$this->setProveedorRubro($this->aProveedorRubro);
			}

			if ($this->aLocalidad !== null) {
				if ($this->aLocalidad->isModified() || $this->aLocalidad->isNew()) {
					$affectedRows += $this->aLocalidad->save($con);
				}
				$this->setLocalidad($this->aLocalidad);
			}

			if ($this->aProvincia !== null) {
				if ($this->aProvincia->isModified() || $this->aProvincia->isNew()) {
					$affectedRows += $this->aProvincia->save($con);
				}
				$this->setProvincia($this->aProvincia);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProveedorPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProveedorPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProveedorPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collNotaPedidosRelatedByProveedorId !== null) {
				foreach ($this->collNotaPedidosRelatedByProveedorId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotaPedidosRelatedByTransporteId !== null) {
				foreach ($this->collNotaPedidosRelatedByTransporteId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompras !== null) {
				foreach ($this->collCompras as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVentas !== null) {
				foreach ($this->collVentas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecepcionPedidos !== null) {
				foreach ($this->collRecepcionPedidos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProductoProveedors !== null) {
				foreach ($this->collProductoProveedors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProveedorFDPs !== null) {
				foreach ($this->collProveedorFDPs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProveedorRubro !== null) {
				if (!$this->aProveedorRubro->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProveedorRubro->getValidationFailures());
				}
			}

			if ($this->aLocalidad !== null) {
				if (!$this->aLocalidad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLocalidad->getValidationFailures());
				}
			}

			if ($this->aProvincia !== null) {
				if (!$this->aProvincia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProvincia->getValidationFailures());
				}
			}


			if (($retval = ProveedorPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collNotaPedidosRelatedByProveedorId !== null) {
					foreach ($this->collNotaPedidosRelatedByProveedorId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotaPedidosRelatedByTransporteId !== null) {
					foreach ($this->collNotaPedidosRelatedByTransporteId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompras !== null) {
					foreach ($this->collCompras as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVentas !== null) {
					foreach ($this->collVentas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecepcionPedidos !== null) {
					foreach ($this->collRecepcionPedidos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProductoProveedors !== null) {
					foreach ($this->collProductoProveedors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProveedorFDPs !== null) {
					foreach ($this->collProveedorFDPs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProveedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getCuit();
				break;
			case 3:
				return $this->getRubroId();
				break;
			case 4:
				return $this->getTelefono();
				break;
			case 5:
				return $this->getFax();
				break;
			case 6:
				return $this->getMovil();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getPersonaNombre();
				break;
			case 9:
				return $this->getPersonaApellido();
				break;
			case 10:
				return $this->getDireccionCalle();
				break;
			case 11:
				return $this->getDireccionNumero();
				break;
			case 12:
				return $this->getDireccionManzana();
				break;
			case 13:
				return $this->getDireccionBarrio();
				break;
			case 14:
				return $this->getDireccionPiso();
				break;
			case 15:
				return $this->getDireccionDepto();
				break;
			case 16:
				return $this->getLocalidadId();
				break;
			case 17:
				return $this->getProvinciaId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProveedorPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getCuit(),
			$keys[3] => $this->getRubroId(),
			$keys[4] => $this->getTelefono(),
			$keys[5] => $this->getFax(),
			$keys[6] => $this->getMovil(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getPersonaNombre(),
			$keys[9] => $this->getPersonaApellido(),
			$keys[10] => $this->getDireccionCalle(),
			$keys[11] => $this->getDireccionNumero(),
			$keys[12] => $this->getDireccionManzana(),
			$keys[13] => $this->getDireccionBarrio(),
			$keys[14] => $this->getDireccionPiso(),
			$keys[15] => $this->getDireccionDepto(),
			$keys[16] => $this->getLocalidadId(),
			$keys[17] => $this->getProvinciaId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProveedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setCuit($value);
				break;
			case 3:
				$this->setRubroId($value);
				break;
			case 4:
				$this->setTelefono($value);
				break;
			case 5:
				$this->setFax($value);
				break;
			case 6:
				$this->setMovil($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setPersonaNombre($value);
				break;
			case 9:
				$this->setPersonaApellido($value);
				break;
			case 10:
				$this->setDireccionCalle($value);
				break;
			case 11:
				$this->setDireccionNumero($value);
				break;
			case 12:
				$this->setDireccionManzana($value);
				break;
			case 13:
				$this->setDireccionBarrio($value);
				break;
			case 14:
				$this->setDireccionPiso($value);
				break;
			case 15:
				$this->setDireccionDepto($value);
				break;
			case 16:
				$this->setLocalidadId($value);
				break;
			case 17:
				$this->setProvinciaId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProveedorPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCuit($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRubroId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTelefono($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFax($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMovil($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPersonaNombre($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPersonaApellido($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDireccionCalle($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDireccionNumero($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDireccionManzana($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDireccionBarrio($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDireccionPiso($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDireccionDepto($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setLocalidadId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setProvinciaId($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProveedorPeer::ID)) $criteria->add(ProveedorPeer::ID, $this->id);
		if ($this->isColumnModified(ProveedorPeer::NOMBRE)) $criteria->add(ProveedorPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(ProveedorPeer::CUIT)) $criteria->add(ProveedorPeer::CUIT, $this->cuit);
		if ($this->isColumnModified(ProveedorPeer::RUBRO_ID)) $criteria->add(ProveedorPeer::RUBRO_ID, $this->rubro_id);
		if ($this->isColumnModified(ProveedorPeer::TELEFONO)) $criteria->add(ProveedorPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(ProveedorPeer::FAX)) $criteria->add(ProveedorPeer::FAX, $this->fax);
		if ($this->isColumnModified(ProveedorPeer::MOVIL)) $criteria->add(ProveedorPeer::MOVIL, $this->movil);
		if ($this->isColumnModified(ProveedorPeer::EMAIL)) $criteria->add(ProveedorPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ProveedorPeer::PERSONA_NOMBRE)) $criteria->add(ProveedorPeer::PERSONA_NOMBRE, $this->persona_nombre);
		if ($this->isColumnModified(ProveedorPeer::PERSONA_APELLIDO)) $criteria->add(ProveedorPeer::PERSONA_APELLIDO, $this->persona_apellido);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_CALLE)) $criteria->add(ProveedorPeer::DIRECCION_CALLE, $this->direccion_calle);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_NUMERO)) $criteria->add(ProveedorPeer::DIRECCION_NUMERO, $this->direccion_numero);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_MANZANA)) $criteria->add(ProveedorPeer::DIRECCION_MANZANA, $this->direccion_manzana);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_BARRIO)) $criteria->add(ProveedorPeer::DIRECCION_BARRIO, $this->direccion_barrio);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_PISO)) $criteria->add(ProveedorPeer::DIRECCION_PISO, $this->direccion_piso);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION_DEPTO)) $criteria->add(ProveedorPeer::DIRECCION_DEPTO, $this->direccion_depto);
		if ($this->isColumnModified(ProveedorPeer::LOCALIDAD_ID)) $criteria->add(ProveedorPeer::LOCALIDAD_ID, $this->localidad_id);
		if ($this->isColumnModified(ProveedorPeer::PROVINCIA_ID)) $criteria->add(ProveedorPeer::PROVINCIA_ID, $this->provincia_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);

		$criteria->add(ProveedorPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Proveedor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNombre($this->nombre);

		$copyObj->setCuit($this->cuit);

		$copyObj->setRubroId($this->rubro_id);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setFax($this->fax);

		$copyObj->setMovil($this->movil);

		$copyObj->setEmail($this->email);

		$copyObj->setPersonaNombre($this->persona_nombre);

		$copyObj->setPersonaApellido($this->persona_apellido);

		$copyObj->setDireccionCalle($this->direccion_calle);

		$copyObj->setDireccionNumero($this->direccion_numero);

		$copyObj->setDireccionManzana($this->direccion_manzana);

		$copyObj->setDireccionBarrio($this->direccion_barrio);

		$copyObj->setDireccionPiso($this->direccion_piso);

		$copyObj->setDireccionDepto($this->direccion_depto);

		$copyObj->setLocalidadId($this->localidad_id);

		$copyObj->setProvinciaId($this->provincia_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getNotaPedidosRelatedByProveedorId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedByProveedorId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotaPedidosRelatedByTransporteId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedByTransporteId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompras() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompra($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVentas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVenta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecepcionPedidos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecepcionPedido($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProductoProveedors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProductoProveedor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProveedorFDPs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProveedorFDP($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Proveedor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProveedorPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProveedorPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a ProveedorRubro object.
	 *
	 * @param      ProveedorRubro $v
	 * @return     Proveedor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProveedorRubro(ProveedorRubro $v = null)
	{
		if ($v === null) {
			$this->setRubroId(NULL);
		} else {
			$this->setRubroId($v->getId());
		}

		$this->aProveedorRubro = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ProveedorRubro object, it will not be re-added.
		if ($v !== null) {
			$v->addProveedor($this);
		}

		return $this;
	}


	/**
	 * Get the associated ProveedorRubro object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ProveedorRubro The associated ProveedorRubro object.
	 * @throws     PropelException
	 */
	public function getProveedorRubro(PropelPDO $con = null)
	{
		if ($this->aProveedorRubro === null && ($this->rubro_id !== null)) {
			$c = new Criteria(ProveedorRubroPeer::DATABASE_NAME);
			$c->add(ProveedorRubroPeer::ID, $this->rubro_id);
			$this->aProveedorRubro = ProveedorRubroPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProveedorRubro->addProveedors($this);
			 */
		}
		return $this->aProveedorRubro;
	}

	/**
	 * Declares an association between this object and a Localidad object.
	 *
	 * @param      Localidad $v
	 * @return     Proveedor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLocalidad(Localidad $v = null)
	{
		if ($v === null) {
			$this->setLocalidadId(NULL);
		} else {
			$this->setLocalidadId($v->getId());
		}

		$this->aLocalidad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Localidad object, it will not be re-added.
		if ($v !== null) {
			$v->addProveedor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Localidad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Localidad The associated Localidad object.
	 * @throws     PropelException
	 */
	public function getLocalidad(PropelPDO $con = null)
	{
		if ($this->aLocalidad === null && ($this->localidad_id !== null)) {
			$c = new Criteria(LocalidadPeer::DATABASE_NAME);
			$c->add(LocalidadPeer::ID, $this->localidad_id);
			$this->aLocalidad = LocalidadPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLocalidad->addProveedors($this);
			 */
		}
		return $this->aLocalidad;
	}

	/**
	 * Declares an association between this object and a Provincia object.
	 *
	 * @param      Provincia $v
	 * @return     Proveedor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProvincia(Provincia $v = null)
	{
		if ($v === null) {
			$this->setProvinciaId(NULL);
		} else {
			$this->setProvinciaId($v->getId());
		}

		$this->aProvincia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Provincia object, it will not be re-added.
		if ($v !== null) {
			$v->addProveedor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Provincia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Provincia The associated Provincia object.
	 * @throws     PropelException
	 */
	public function getProvincia(PropelPDO $con = null)
	{
		if ($this->aProvincia === null && ($this->provincia_id !== null)) {
			$c = new Criteria(ProvinciaPeer::DATABASE_NAME);
			$c->add(ProvinciaPeer::ID, $this->provincia_id);
			$this->aProvincia = ProvinciaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProvincia->addProveedors($this);
			 */
		}
		return $this->aProvincia;
	}

	/**
	 * Clears out the collNotaPedidosRelatedByProveedorId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedByProveedorId()
	 */
	public function clearNotaPedidosRelatedByProveedorId()
	{
		$this->collNotaPedidosRelatedByProveedorId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedByProveedorId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedByProveedorId collection to an empty array (like clearcollNotaPedidosRelatedByProveedorId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedByProveedorId()
	{
		$this->collNotaPedidosRelatedByProveedorId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related NotaPedidosRelatedByProveedorId from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedByProveedorId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedByProveedorId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedByProveedorId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedByProveedorId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedByProveedorId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedByProveedorId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			$this->initNotaPedidosRelatedByProveedorId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedByProveedorId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedByProveedorId, $l);
			$l->setProveedorRelatedByProveedorId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByProveedorId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByProveedorIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByProveedorId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByProveedorId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByProveedorIdJoinsfGuardUserRelatedByAdministraId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByProveedorId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByProveedorId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByProveedorIdJoinsfGuardUserRelatedBySolicitaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedBySolicitaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedBySolicitaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByProveedorId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByProveedorId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByProveedorIdJoinsfGuardUserRelatedByControlaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByProveedorId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByProveedorId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByProveedorIdJoinsfGuardUserRelatedByAutorizaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByProveedorId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByProveedorId = array();
			} else {

				$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAutorizaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByProveedorIdCriteria) || !$this->lastNotaPedidoRelatedByProveedorIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByProveedorId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAutorizaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByProveedorIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByProveedorId;
	}

	/**
	 * Clears out the collNotaPedidosRelatedByTransporteId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedByTransporteId()
	 */
	public function clearNotaPedidosRelatedByTransporteId()
	{
		$this->collNotaPedidosRelatedByTransporteId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedByTransporteId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedByTransporteId collection to an empty array (like clearcollNotaPedidosRelatedByTransporteId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedByTransporteId()
	{
		$this->collNotaPedidosRelatedByTransporteId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related NotaPedidosRelatedByTransporteId from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedByTransporteId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedByTransporteId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedByTransporteId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedByTransporteId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedByTransporteId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedByTransporteId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			$this->initNotaPedidosRelatedByTransporteId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedByTransporteId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedByTransporteId, $l);
			$l->setProveedorRelatedByTransporteId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByTransporteId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByTransporteIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByTransporteId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByTransporteId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByTransporteIdJoinsfGuardUserRelatedByAdministraId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByTransporteId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByTransporteId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByTransporteIdJoinsfGuardUserRelatedBySolicitaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedBySolicitaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedBySolicitaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByTransporteId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByTransporteId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByTransporteIdJoinsfGuardUserRelatedByControlaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByTransporteId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByTransporteId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getNotaPedidosRelatedByTransporteIdJoinsfGuardUserRelatedByAutorizaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByTransporteId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByTransporteId = array();
			} else {

				$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAutorizaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::TRANSPORTE_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByTransporteIdCriteria) || !$this->lastNotaPedidoRelatedByTransporteIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByTransporteId = NotaPedidoPeer::doSelectJoinsfGuardUserRelatedByAutorizaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByTransporteIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByTransporteId;
	}

	/**
	 * Clears out the collCompras collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompras()
	 */
	public function clearCompras()
	{
		$this->collCompras = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompras collection (array).
	 *
	 * By default this just sets the collCompras collection to an empty array (like clearcollCompras());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompras()
	{
		$this->collCompras = array();
	}

	/**
	 * Gets an array of Compra objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related Compras from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Compra[]
	 * @throws     PropelException
	 */
	public function getCompras($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompras === null) {
			if ($this->isNew()) {
			   $this->collCompras = array();
			} else {

				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				CompraPeer::addSelectColumns($criteria);
				$this->collCompras = CompraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				CompraPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompraCriteria) || !$this->lastCompraCriteria->equals($criteria)) {
					$this->collCompras = CompraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompraCriteria = $criteria;
		return $this->collCompras;
	}

	/**
	 * Returns the number of related Compra objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Compra objects.
	 * @throws     PropelException
	 */
	public function countCompras(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompras === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				$count = CompraPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				if (!isset($this->lastCompraCriteria) || !$this->lastCompraCriteria->equals($criteria)) {
					$count = CompraPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompras);
				}
			} else {
				$count = count($this->collCompras);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Compra object to this object
	 * through the Compra foreign key attribute.
	 *
	 * @param      Compra $l Compra
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompra(Compra $l)
	{
		if ($this->collCompras === null) {
			$this->initCompras();
		}
		if (!in_array($l, $this->collCompras, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompras, $l);
			$l->setProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Compras from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getComprasJoinProducto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompras === null) {
			if ($this->isNew()) {
				$this->collCompras = array();
			} else {

				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				$this->collCompras = CompraPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastCompraCriteria) || !$this->lastCompraCriteria->equals($criteria)) {
				$this->collCompras = CompraPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraCriteria = $criteria;

		return $this->collCompras;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Compras from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getComprasJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompras === null) {
			if ($this->isNew()) {
				$this->collCompras = array();
			} else {

				$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

				$this->collCompras = CompraPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastCompraCriteria) || !$this->lastCompraCriteria->equals($criteria)) {
				$this->collCompras = CompraPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraCriteria = $criteria;

		return $this->collCompras;
	}

	/**
	 * Clears out the collVentas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVentas()
	 */
	public function clearVentas()
	{
		$this->collVentas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVentas collection (array).
	 *
	 * By default this just sets the collVentas collection to an empty array (like clearcollVentas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVentas()
	{
		$this->collVentas = array();
	}

	/**
	 * Gets an array of Venta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related Ventas from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Venta[]
	 * @throws     PropelException
	 */
	public function getVentas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
			   $this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				VentaPeer::addSelectColumns($criteria);
				$this->collVentas = VentaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				VentaPeer::addSelectColumns($criteria);
				if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
					$this->collVentas = VentaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVentaCriteria = $criteria;
		return $this->collVentas;
	}

	/**
	 * Returns the number of related Venta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Venta objects.
	 * @throws     PropelException
	 */
	public function countVentas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				$count = VentaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
					$count = VentaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVentas);
				}
			} else {
				$count = count($this->collVentas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Venta object to this object
	 * through the Venta foreign key attribute.
	 *
	 * @param      Venta $l Venta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVenta(Venta $l)
	{
		if ($this->collVentas === null) {
			$this->initVentas();
		}
		if (!in_array($l, $this->collVentas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVentas, $l);
			$l->setProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getVentasJoinProducto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				$this->collVentas = VentaPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

			if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
				$this->collVentas = VentaPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaCriteria = $criteria;

		return $this->collVentas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getVentasJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

				$this->collVentas = VentaPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaPeer::TRANSPORTISTA_EXTERNO_ID, $this->id);

			if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
				$this->collVentas = VentaPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaCriteria = $criteria;

		return $this->collVentas;
	}

	/**
	 * Clears out the collRecepcionPedidos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecepcionPedidos()
	 */
	public function clearRecepcionPedidos()
	{
		$this->collRecepcionPedidos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecepcionPedidos collection (array).
	 *
	 * By default this just sets the collRecepcionPedidos collection to an empty array (like clearcollRecepcionPedidos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecepcionPedidos()
	{
		$this->collRecepcionPedidos = array();
	}

	/**
	 * Gets an array of RecepcionPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related RecepcionPedidos from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RecepcionPedido[]
	 * @throws     PropelException
	 */
	public function getRecepcionPedidos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
			   $this->collRecepcionPedidos = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
					$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecepcionPedidoCriteria = $criteria;
		return $this->collRecepcionPedidos;
	}

	/**
	 * Returns the number of related RecepcionPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RecepcionPedido objects.
	 * @throws     PropelException
	 */
	public function countRecepcionPedidos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				$count = RecepcionPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
					$count = RecepcionPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRecepcionPedidos);
				}
			} else {
				$count = count($this->collRecepcionPedidos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RecepcionPedido object to this object
	 * through the RecepcionPedido foreign key attribute.
	 *
	 * @param      RecepcionPedido $l RecepcionPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecepcionPedido(RecepcionPedido $l)
	{
		if ($this->collRecepcionPedidos === null) {
			$this->initRecepcionPedidos();
		}
		if (!in_array($l, $this->collRecepcionPedidos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecepcionPedidos, $l);
			$l->setProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related RecepcionPedidos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRecepcionPedidosJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidos = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoCriteria = $criteria;

		return $this->collRecepcionPedidos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related RecepcionPedidos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRecepcionPedidosJoinsfGuardUserRelatedByRecibeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidos = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByRecibeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByRecibeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoCriteria = $criteria;

		return $this->collRecepcionPedidos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related RecepcionPedidos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRecepcionPedidosJoinsfGuardUserRelatedByControlaId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidos = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByControlaId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoCriteria = $criteria;

		return $this->collRecepcionPedidos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related RecepcionPedidos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRecepcionPedidosJoinsfGuardUserRelatedByAdministraId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidos === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidos = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoCriteria) || !$this->lastRecepcionPedidoCriteria->equals($criteria)) {
				$this->collRecepcionPedidos = RecepcionPedidoPeer::doSelectJoinsfGuardUserRelatedByAdministraId($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoCriteria = $criteria;

		return $this->collRecepcionPedidos;
	}

	/**
	 * Clears out the collProductoProveedors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProductoProveedors()
	 */
	public function clearProductoProveedors()
	{
		$this->collProductoProveedors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProductoProveedors collection (array).
	 *
	 * By default this just sets the collProductoProveedors collection to an empty array (like clearcollProductoProveedors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProductoProveedors()
	{
		$this->collProductoProveedors = array();
	}

	/**
	 * Gets an array of ProductoProveedor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related ProductoProveedors from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProductoProveedor[]
	 * @throws     PropelException
	 */
	public function getProductoProveedors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductoProveedors === null) {
			if ($this->isNew()) {
			   $this->collProductoProveedors = array();
			} else {

				$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

				ProductoProveedorPeer::addSelectColumns($criteria);
				$this->collProductoProveedors = ProductoProveedorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

				ProductoProveedorPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductoProveedorCriteria) || !$this->lastProductoProveedorCriteria->equals($criteria)) {
					$this->collProductoProveedors = ProductoProveedorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductoProveedorCriteria = $criteria;
		return $this->collProductoProveedors;
	}

	/**
	 * Returns the number of related ProductoProveedor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProductoProveedor objects.
	 * @throws     PropelException
	 */
	public function countProductoProveedors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProductoProveedors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

				$count = ProductoProveedorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

				if (!isset($this->lastProductoProveedorCriteria) || !$this->lastProductoProveedorCriteria->equals($criteria)) {
					$count = ProductoProveedorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProductoProveedors);
				}
			} else {
				$count = count($this->collProductoProveedors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProductoProveedor object to this object
	 * through the ProductoProveedor foreign key attribute.
	 *
	 * @param      ProductoProveedor $l ProductoProveedor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductoProveedor(ProductoProveedor $l)
	{
		if ($this->collProductoProveedors === null) {
			$this->initProductoProveedors();
		}
		if (!in_array($l, $this->collProductoProveedors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProductoProveedors, $l);
			$l->setProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related ProductoProveedors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getProductoProveedorsJoinProducto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductoProveedors === null) {
			if ($this->isNew()) {
				$this->collProductoProveedors = array();
			} else {

				$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

				$this->collProductoProveedors = ProductoProveedorPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductoProveedorPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastProductoProveedorCriteria) || !$this->lastProductoProveedorCriteria->equals($criteria)) {
				$this->collProductoProveedors = ProductoProveedorPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		}
		$this->lastProductoProveedorCriteria = $criteria;

		return $this->collProductoProveedors;
	}

	/**
	 * Clears out the collProveedorFDPs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProveedorFDPs()
	 */
	public function clearProveedorFDPs()
	{
		$this->collProveedorFDPs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProveedorFDPs collection (array).
	 *
	 * By default this just sets the collProveedorFDPs collection to an empty array (like clearcollProveedorFDPs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProveedorFDPs()
	{
		$this->collProveedorFDPs = array();
	}

	/**
	 * Gets an array of ProveedorFDP objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related ProveedorFDPs from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProveedorFDP[]
	 * @throws     PropelException
	 */
	public function getProveedorFDPs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProveedorFDPs === null) {
			if ($this->isNew()) {
			   $this->collProveedorFDPs = array();
			} else {

				$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

				ProveedorFDPPeer::addSelectColumns($criteria);
				$this->collProveedorFDPs = ProveedorFDPPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

				ProveedorFDPPeer::addSelectColumns($criteria);
				if (!isset($this->lastProveedorFDPCriteria) || !$this->lastProveedorFDPCriteria->equals($criteria)) {
					$this->collProveedorFDPs = ProveedorFDPPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProveedorFDPCriteria = $criteria;
		return $this->collProveedorFDPs;
	}

	/**
	 * Returns the number of related ProveedorFDP objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProveedorFDP objects.
	 * @throws     PropelException
	 */
	public function countProveedorFDPs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProveedorFDPs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

				$count = ProveedorFDPPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

				if (!isset($this->lastProveedorFDPCriteria) || !$this->lastProveedorFDPCriteria->equals($criteria)) {
					$count = ProveedorFDPPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProveedorFDPs);
				}
			} else {
				$count = count($this->collProveedorFDPs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProveedorFDP object to this object
	 * through the ProveedorFDP foreign key attribute.
	 *
	 * @param      ProveedorFDP $l ProveedorFDP
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProveedorFDP(ProveedorFDP $l)
	{
		if ($this->collProveedorFDPs === null) {
			$this->initProveedorFDPs();
		}
		if (!in_array($l, $this->collProveedorFDPs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProveedorFDPs, $l);
			$l->setProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related ProveedorFDPs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getProveedorFDPsJoinProveedorFDPRelatedByFdpId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProveedorFDPs === null) {
			if ($this->isNew()) {
				$this->collProveedorFDPs = array();
			} else {

				$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

				$this->collProveedorFDPs = ProveedorFDPPeer::doSelectJoinProveedorFDPRelatedByFdpId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProveedorFDPPeer::PROVEEDOR_ID, $this->id);

			if (!isset($this->lastProveedorFDPCriteria) || !$this->lastProveedorFDPCriteria->equals($criteria)) {
				$this->collProveedorFDPs = ProveedorFDPPeer::doSelectJoinProveedorFDPRelatedByFdpId($criteria, $con, $join_behavior);
			}
		}
		$this->lastProveedorFDPCriteria = $criteria;

		return $this->collProveedorFDPs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collNotaPedidosRelatedByProveedorId) {
				foreach ((array) $this->collNotaPedidosRelatedByProveedorId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotaPedidosRelatedByTransporteId) {
				foreach ((array) $this->collNotaPedidosRelatedByTransporteId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompras) {
				foreach ((array) $this->collCompras as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVentas) {
				foreach ((array) $this->collVentas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecepcionPedidos) {
				foreach ((array) $this->collRecepcionPedidos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProductoProveedors) {
				foreach ((array) $this->collProductoProveedors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProveedorFDPs) {
				foreach ((array) $this->collProveedorFDPs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collNotaPedidosRelatedByProveedorId = null;
		$this->collNotaPedidosRelatedByTransporteId = null;
		$this->collCompras = null;
		$this->collVentas = null;
		$this->collRecepcionPedidos = null;
		$this->collProductoProveedors = null;
		$this->collProveedorFDPs = null;
			$this->aProveedorRubro = null;
			$this->aLocalidad = null;
			$this->aProvincia = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseProveedor:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseProveedor::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseProveedor
