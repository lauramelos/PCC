<?php

/**
 * Base class that represents a row from the 'recepcion_pedido' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jan 12 14:28:40 2010
 *
 * @package    lib.model.om
 */
abstract class BaseRecepcionPedido extends BaseObject  implements Persistent {


  const PEER = 'RecepcionPedidoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RecepcionPedidoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nota_pedido_id field.
	 * @var        int
	 */
	protected $nota_pedido_id;

	/**
	 * The value for the fecha field.
	 * @var        string
	 */
	protected $fecha;

	/**
	 * The value for the recibe_id field.
	 * @var        int
	 */
	protected $recibe_id;

	/**
	 * The value for the controla_id field.
	 * @var        int
	 */
	protected $controla_id;

	/**
	 * The value for the administra_id field.
	 * @var        int
	 */
	protected $administra_id;

	/**
	 * The value for the proveedor_factura field.
	 * @var        string
	 */
	protected $proveedor_factura;

	/**
	 * The value for the proveedor_remito field.
	 * @var        string
	 */
	protected $proveedor_remito;

	/**
	 * The value for the transportista_id field.
	 * @var        int
	 */
	protected $transportista_id;

	/**
	 * The value for the transportista_numero_guia field.
	 * @var        string
	 */
	protected $transportista_numero_guia;

	/**
	 * The value for the transportista_bultos field.
	 * @var        int
	 */
	protected $transportista_bultos;

	/**
	 * The value for the remito_proveedor field.
	 * @var        boolean
	 */
	protected $remito_proveedor;

	/**
	 * The value for the certificado_calidad field.
	 * @var        boolean
	 */
	protected $certificado_calidad;

	/**
	 * The value for the factura field.
	 * @var        boolean
	 */
	protected $factura;

	/**
	 * The value for the manuales field.
	 * @var        boolean
	 */
	protected $manuales;

	/**
	 * The value for the ensayos field.
	 * @var        boolean
	 */
	protected $ensayos;

	/**
	 * The value for the cert_conformidad field.
	 * @var        boolean
	 */
	protected $cert_conformidad;

	/**
	 * The value for the msds field.
	 * @var        boolean
	 */
	protected $msds;

	/**
	 * The value for the otros field.
	 * @var        boolean
	 */
	protected $otros;

	/**
	 * The value for the otros_descripcion field.
	 * @var        string
	 */
	protected $otros_descripcion;

	/**
	 * The value for the error_envio field.
	 * @var        boolean
	 */
	protected $error_envio;

	/**
	 * The value for the error_envio_desc field.
	 * @var        string
	 */
	protected $error_envio_desc;

	/**
	 * The value for the rechazado field.
	 * @var        boolean
	 */
	protected $rechazado;

	/**
	 * The value for the rechazado_desc field.
	 * @var        string
	 */
	protected $rechazado_desc;

	/**
	 * The value for the control_items field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $control_items;

	/**
	 * The value for the control_precios field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $control_precios;

	/**
	 * The value for the control_calidad field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $control_calidad;

	/**
	 * The value for the control_cantidad field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $control_cantidad;

	/**
	 * The value for the cerrada field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $cerrada;

	/**
	 * @var        NotaPedido
	 */
	protected $aNotaPedido;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByRecibeId;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByControlaId;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByAdministraId;

	/**
	 * @var        Proveedor
	 */
	protected $aProveedor;

	/**
	 * @var        array CompraEstado[] Collection to store aggregation of CompraEstado objects.
	 */
	protected $collCompraEstados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompraEstados.
	 */
	private $lastCompraEstadoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRecepcionPedido object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->control_items = false;
		$this->control_precios = false;
		$this->control_calidad = false;
		$this->control_cantidad = false;
		$this->cerrada = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nota_pedido_id] column value.
	 * 
	 * @return     int
	 */
	public function getNotaPedidoId()
	{
		return $this->nota_pedido_id;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFecha($format = 'Y-m-d')
	{
		if ($this->fecha === null) {
			return null;
		}


		if ($this->fecha === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [recibe_id] column value.
	 * 
	 * @return     int
	 */
	public function getRecibeId()
	{
		return $this->recibe_id;
	}

	/**
	 * Get the [controla_id] column value.
	 * 
	 * @return     int
	 */
	public function getControlaId()
	{
		return $this->controla_id;
	}

	/**
	 * Get the [administra_id] column value.
	 * 
	 * @return     int
	 */
	public function getAdministraId()
	{
		return $this->administra_id;
	}

	/**
	 * Get the [proveedor_factura] column value.
	 * 
	 * @return     string
	 */
	public function getProveedorFactura()
	{
		return $this->proveedor_factura;
	}

	/**
	 * Get the [proveedor_remito] column value.
	 * 
	 * @return     string
	 */
	public function getProveedorRemito()
	{
		return $this->proveedor_remito;
	}

	/**
	 * Get the [transportista_id] column value.
	 * 
	 * @return     int
	 */
	public function getTransportistaId()
	{
		return $this->transportista_id;
	}

	/**
	 * Get the [transportista_numero_guia] column value.
	 * 
	 * @return     string
	 */
	public function getTransportistaNumeroGuia()
	{
		return $this->transportista_numero_guia;
	}

	/**
	 * Get the [transportista_bultos] column value.
	 * 
	 * @return     int
	 */
	public function getTransportistaBultos()
	{
		return $this->transportista_bultos;
	}

	/**
	 * Get the [remito_proveedor] column value.
	 * 
	 * @return     boolean
	 */
	public function getRemitoProveedor()
	{
		return $this->remito_proveedor;
	}

	/**
	 * Get the [certificado_calidad] column value.
	 * 
	 * @return     boolean
	 */
	public function getCertificadoCalidad()
	{
		return $this->certificado_calidad;
	}

	/**
	 * Get the [factura] column value.
	 * 
	 * @return     boolean
	 */
	public function getFactura()
	{
		return $this->factura;
	}

	/**
	 * Get the [manuales] column value.
	 * 
	 * @return     boolean
	 */
	public function getManuales()
	{
		return $this->manuales;
	}

	/**
	 * Get the [ensayos] column value.
	 * 
	 * @return     boolean
	 */
	public function getEnsayos()
	{
		return $this->ensayos;
	}

	/**
	 * Get the [cert_conformidad] column value.
	 * 
	 * @return     boolean
	 */
	public function getCertConformidad()
	{
		return $this->cert_conformidad;
	}

	/**
	 * Get the [msds] column value.
	 * 
	 * @return     boolean
	 */
	public function getMsds()
	{
		return $this->msds;
	}

	/**
	 * Get the [otros] column value.
	 * 
	 * @return     boolean
	 */
	public function getOtros()
	{
		return $this->otros;
	}

	/**
	 * Get the [otros_descripcion] column value.
	 * 
	 * @return     string
	 */
	public function getOtrosDescripcion()
	{
		return $this->otros_descripcion;
	}

	/**
	 * Get the [error_envio] column value.
	 * 
	 * @return     boolean
	 */
	public function getErrorEnvio()
	{
		return $this->error_envio;
	}

	/**
	 * Get the [error_envio_desc] column value.
	 * 
	 * @return     string
	 */
	public function getErrorEnvioDesc()
	{
		return $this->error_envio_desc;
	}

	/**
	 * Get the [rechazado] column value.
	 * 
	 * @return     boolean
	 */
	public function getRechazado()
	{
		return $this->rechazado;
	}

	/**
	 * Get the [rechazado_desc] column value.
	 * 
	 * @return     string
	 */
	public function getRechazadoDesc()
	{
		return $this->rechazado_desc;
	}

	/**
	 * Get the [control_items] column value.
	 * 
	 * @return     boolean
	 */
	public function getControlItems()
	{
		return $this->control_items;
	}

	/**
	 * Get the [control_precios] column value.
	 * 
	 * @return     boolean
	 */
	public function getControlPrecios()
	{
		return $this->control_precios;
	}

	/**
	 * Get the [control_calidad] column value.
	 * 
	 * @return     boolean
	 */
	public function getControlCalidad()
	{
		return $this->control_calidad;
	}

	/**
	 * Get the [control_cantidad] column value.
	 * 
	 * @return     boolean
	 */
	public function getControlCantidad()
	{
		return $this->control_cantidad;
	}

	/**
	 * Get the [cerrada] column value.
	 * 
	 * @return     boolean
	 */
	public function getCerrada()
	{
		return $this->cerrada;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nota_pedido_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setNotaPedidoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nota_pedido_id !== $v) {
			$this->nota_pedido_id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::NOTA_PEDIDO_ID;
		}

		if ($this->aNotaPedido !== null && $this->aNotaPedido->getId() !== $v) {
			$this->aNotaPedido = null;
		}

		return $this;
	} // setNotaPedidoId()

	/**
	 * Sets the value of [fecha] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setFecha($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha !== null && $tmpDt = new DateTime($this->fecha)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RecepcionPedidoPeer::FECHA;
			}
		} // if either are not null

		return $this;
	} // setFecha()

	/**
	 * Set the value of [recibe_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setRecibeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->recibe_id !== $v) {
			$this->recibe_id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::RECIBE_ID;
		}

		if ($this->asfGuardUserRelatedByRecibeId !== null && $this->asfGuardUserRelatedByRecibeId->getId() !== $v) {
			$this->asfGuardUserRelatedByRecibeId = null;
		}

		return $this;
	} // setRecibeId()

	/**
	 * Set the value of [controla_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setControlaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->controla_id !== $v) {
			$this->controla_id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CONTROLA_ID;
		}

		if ($this->asfGuardUserRelatedByControlaId !== null && $this->asfGuardUserRelatedByControlaId->getId() !== $v) {
			$this->asfGuardUserRelatedByControlaId = null;
		}

		return $this;
	} // setControlaId()

	/**
	 * Set the value of [administra_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setAdministraId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->administra_id !== $v) {
			$this->administra_id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::ADMINISTRA_ID;
		}

		if ($this->asfGuardUserRelatedByAdministraId !== null && $this->asfGuardUserRelatedByAdministraId->getId() !== $v) {
			$this->asfGuardUserRelatedByAdministraId = null;
		}

		return $this;
	} // setAdministraId()

	/**
	 * Set the value of [proveedor_factura] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setProveedorFactura($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proveedor_factura !== $v) {
			$this->proveedor_factura = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::PROVEEDOR_FACTURA;
		}

		return $this;
	} // setProveedorFactura()

	/**
	 * Set the value of [proveedor_remito] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setProveedorRemito($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proveedor_remito !== $v) {
			$this->proveedor_remito = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::PROVEEDOR_REMITO;
		}

		return $this;
	} // setProveedorRemito()

	/**
	 * Set the value of [transportista_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setTransportistaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->transportista_id !== $v) {
			$this->transportista_id = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::TRANSPORTISTA_ID;
		}

		if ($this->aProveedor !== null && $this->aProveedor->getId() !== $v) {
			$this->aProveedor = null;
		}

		return $this;
	} // setTransportistaId()

	/**
	 * Set the value of [transportista_numero_guia] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setTransportistaNumeroGuia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->transportista_numero_guia !== $v) {
			$this->transportista_numero_guia = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::TRANSPORTISTA_NUMERO_GUIA;
		}

		return $this;
	} // setTransportistaNumeroGuia()

	/**
	 * Set the value of [transportista_bultos] column.
	 * 
	 * @param      int $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setTransportistaBultos($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->transportista_bultos !== $v) {
			$this->transportista_bultos = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::TRANSPORTISTA_BULTOS;
		}

		return $this;
	} // setTransportistaBultos()

	/**
	 * Set the value of [remito_proveedor] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setRemitoProveedor($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->remito_proveedor !== $v) {
			$this->remito_proveedor = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::REMITO_PROVEEDOR;
		}

		return $this;
	} // setRemitoProveedor()

	/**
	 * Set the value of [certificado_calidad] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setCertificadoCalidad($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->certificado_calidad !== $v) {
			$this->certificado_calidad = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CERTIFICADO_CALIDAD;
		}

		return $this;
	} // setCertificadoCalidad()

	/**
	 * Set the value of [factura] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setFactura($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->factura !== $v) {
			$this->factura = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::FACTURA;
		}

		return $this;
	} // setFactura()

	/**
	 * Set the value of [manuales] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setManuales($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->manuales !== $v) {
			$this->manuales = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::MANUALES;
		}

		return $this;
	} // setManuales()

	/**
	 * Set the value of [ensayos] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setEnsayos($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->ensayos !== $v) {
			$this->ensayos = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::ENSAYOS;
		}

		return $this;
	} // setEnsayos()

	/**
	 * Set the value of [cert_conformidad] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setCertConformidad($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cert_conformidad !== $v) {
			$this->cert_conformidad = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CERT_CONFORMIDAD;
		}

		return $this;
	} // setCertConformidad()

	/**
	 * Set the value of [msds] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setMsds($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->msds !== $v) {
			$this->msds = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::MSDS;
		}

		return $this;
	} // setMsds()

	/**
	 * Set the value of [otros] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setOtros($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->otros !== $v) {
			$this->otros = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::OTROS;
		}

		return $this;
	} // setOtros()

	/**
	 * Set the value of [otros_descripcion] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setOtrosDescripcion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otros_descripcion !== $v) {
			$this->otros_descripcion = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::OTROS_DESCRIPCION;
		}

		return $this;
	} // setOtrosDescripcion()

	/**
	 * Set the value of [error_envio] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setErrorEnvio($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->error_envio !== $v) {
			$this->error_envio = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::ERROR_ENVIO;
		}

		return $this;
	} // setErrorEnvio()

	/**
	 * Set the value of [error_envio_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setErrorEnvioDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->error_envio_desc !== $v) {
			$this->error_envio_desc = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::ERROR_ENVIO_DESC;
		}

		return $this;
	} // setErrorEnvioDesc()

	/**
	 * Set the value of [rechazado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setRechazado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->rechazado !== $v) {
			$this->rechazado = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::RECHAZADO;
		}

		return $this;
	} // setRechazado()

	/**
	 * Set the value of [rechazado_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setRechazadoDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rechazado_desc !== $v) {
			$this->rechazado_desc = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::RECHAZADO_DESC;
		}

		return $this;
	} // setRechazadoDesc()

	/**
	 * Set the value of [control_items] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setControlItems($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->control_items !== $v || $v === false) {
			$this->control_items = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CONTROL_ITEMS;
		}

		return $this;
	} // setControlItems()

	/**
	 * Set the value of [control_precios] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setControlPrecios($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->control_precios !== $v || $v === false) {
			$this->control_precios = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CONTROL_PRECIOS;
		}

		return $this;
	} // setControlPrecios()

	/**
	 * Set the value of [control_calidad] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setControlCalidad($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->control_calidad !== $v || $v === false) {
			$this->control_calidad = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CONTROL_CALIDAD;
		}

		return $this;
	} // setControlCalidad()

	/**
	 * Set the value of [control_cantidad] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setControlCantidad($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->control_cantidad !== $v || $v === false) {
			$this->control_cantidad = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CONTROL_CANTIDAD;
		}

		return $this;
	} // setControlCantidad()

	/**
	 * Set the value of [cerrada] column.
	 * 
	 * @param      boolean $v new value
	 * @return     RecepcionPedido The current object (for fluent API support)
	 */
	public function setCerrada($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cerrada !== $v || $v === false) {
			$this->cerrada = $v;
			$this->modifiedColumns[] = RecepcionPedidoPeer::CERRADA;
		}

		return $this;
	} // setCerrada()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RecepcionPedidoPeer::CONTROL_ITEMS,RecepcionPedidoPeer::CONTROL_PRECIOS,RecepcionPedidoPeer::CONTROL_CALIDAD,RecepcionPedidoPeer::CONTROL_CANTIDAD,RecepcionPedidoPeer::CERRADA))) {
				return false;
			}

			if ($this->control_items !== false) {
				return false;
			}

			if ($this->control_precios !== false) {
				return false;
			}

			if ($this->control_calidad !== false) {
				return false;
			}

			if ($this->control_cantidad !== false) {
				return false;
			}

			if ($this->cerrada !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nota_pedido_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->fecha = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->recibe_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->controla_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->administra_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->proveedor_factura = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->proveedor_remito = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->transportista_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->transportista_numero_guia = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->transportista_bultos = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->remito_proveedor = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->certificado_calidad = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->factura = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->manuales = ($row[$startcol + 14] !== null) ? (boolean) $row[$startcol + 14] : null;
			$this->ensayos = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->cert_conformidad = ($row[$startcol + 16] !== null) ? (boolean) $row[$startcol + 16] : null;
			$this->msds = ($row[$startcol + 17] !== null) ? (boolean) $row[$startcol + 17] : null;
			$this->otros = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->otros_descripcion = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->error_envio = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->error_envio_desc = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->rechazado = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->rechazado_desc = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->control_items = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->control_precios = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->control_calidad = ($row[$startcol + 26] !== null) ? (boolean) $row[$startcol + 26] : null;
			$this->control_cantidad = ($row[$startcol + 27] !== null) ? (boolean) $row[$startcol + 27] : null;
			$this->cerrada = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = RecepcionPedidoPeer::NUM_COLUMNS - RecepcionPedidoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RecepcionPedido object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aNotaPedido !== null && $this->nota_pedido_id !== $this->aNotaPedido->getId()) {
			$this->aNotaPedido = null;
		}
		if ($this->asfGuardUserRelatedByRecibeId !== null && $this->recibe_id !== $this->asfGuardUserRelatedByRecibeId->getId()) {
			$this->asfGuardUserRelatedByRecibeId = null;
		}
		if ($this->asfGuardUserRelatedByControlaId !== null && $this->controla_id !== $this->asfGuardUserRelatedByControlaId->getId()) {
			$this->asfGuardUserRelatedByControlaId = null;
		}
		if ($this->asfGuardUserRelatedByAdministraId !== null && $this->administra_id !== $this->asfGuardUserRelatedByAdministraId->getId()) {
			$this->asfGuardUserRelatedByAdministraId = null;
		}
		if ($this->aProveedor !== null && $this->transportista_id !== $this->aProveedor->getId()) {
			$this->aProveedor = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RecepcionPedidoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RecepcionPedidoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aNotaPedido = null;
			$this->asfGuardUserRelatedByRecibeId = null;
			$this->asfGuardUserRelatedByControlaId = null;
			$this->asfGuardUserRelatedByAdministraId = null;
			$this->aProveedor = null;
			$this->collCompraEstados = null;
			$this->lastCompraEstadoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRecepcionPedido:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RecepcionPedidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RecepcionPedidoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRecepcionPedido:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRecepcionPedido:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RecepcionPedidoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRecepcionPedido:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RecepcionPedidoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aNotaPedido !== null) {
				if ($this->aNotaPedido->isModified() || $this->aNotaPedido->isNew()) {
					$affectedRows += $this->aNotaPedido->save($con);
				}
				$this->setNotaPedido($this->aNotaPedido);
			}

			if ($this->asfGuardUserRelatedByRecibeId !== null) {
				if ($this->asfGuardUserRelatedByRecibeId->isModified() || $this->asfGuardUserRelatedByRecibeId->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByRecibeId->save($con);
				}
				$this->setsfGuardUserRelatedByRecibeId($this->asfGuardUserRelatedByRecibeId);
			}

			if ($this->asfGuardUserRelatedByControlaId !== null) {
				if ($this->asfGuardUserRelatedByControlaId->isModified() || $this->asfGuardUserRelatedByControlaId->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByControlaId->save($con);
				}
				$this->setsfGuardUserRelatedByControlaId($this->asfGuardUserRelatedByControlaId);
			}

			if ($this->asfGuardUserRelatedByAdministraId !== null) {
				if ($this->asfGuardUserRelatedByAdministraId->isModified() || $this->asfGuardUserRelatedByAdministraId->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByAdministraId->save($con);
				}
				$this->setsfGuardUserRelatedByAdministraId($this->asfGuardUserRelatedByAdministraId);
			}

			if ($this->aProveedor !== null) {
				if ($this->aProveedor->isModified() || $this->aProveedor->isNew()) {
					$affectedRows += $this->aProveedor->save($con);
				}
				$this->setProveedor($this->aProveedor);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RecepcionPedidoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RecepcionPedidoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RecepcionPedidoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCompraEstados !== null) {
				foreach ($this->collCompraEstados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aNotaPedido !== null) {
				if (!$this->aNotaPedido->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aNotaPedido->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByRecibeId !== null) {
				if (!$this->asfGuardUserRelatedByRecibeId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByRecibeId->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByControlaId !== null) {
				if (!$this->asfGuardUserRelatedByControlaId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByControlaId->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByAdministraId !== null) {
				if (!$this->asfGuardUserRelatedByAdministraId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByAdministraId->getValidationFailures());
				}
			}

			if ($this->aProveedor !== null) {
				if (!$this->aProveedor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProveedor->getValidationFailures());
				}
			}


			if (($retval = RecepcionPedidoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCompraEstados !== null) {
					foreach ($this->collCompraEstados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RecepcionPedidoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNotaPedidoId();
				break;
			case 2:
				return $this->getFecha();
				break;
			case 3:
				return $this->getRecibeId();
				break;
			case 4:
				return $this->getControlaId();
				break;
			case 5:
				return $this->getAdministraId();
				break;
			case 6:
				return $this->getProveedorFactura();
				break;
			case 7:
				return $this->getProveedorRemito();
				break;
			case 8:
				return $this->getTransportistaId();
				break;
			case 9:
				return $this->getTransportistaNumeroGuia();
				break;
			case 10:
				return $this->getTransportistaBultos();
				break;
			case 11:
				return $this->getRemitoProveedor();
				break;
			case 12:
				return $this->getCertificadoCalidad();
				break;
			case 13:
				return $this->getFactura();
				break;
			case 14:
				return $this->getManuales();
				break;
			case 15:
				return $this->getEnsayos();
				break;
			case 16:
				return $this->getCertConformidad();
				break;
			case 17:
				return $this->getMsds();
				break;
			case 18:
				return $this->getOtros();
				break;
			case 19:
				return $this->getOtrosDescripcion();
				break;
			case 20:
				return $this->getErrorEnvio();
				break;
			case 21:
				return $this->getErrorEnvioDesc();
				break;
			case 22:
				return $this->getRechazado();
				break;
			case 23:
				return $this->getRechazadoDesc();
				break;
			case 24:
				return $this->getControlItems();
				break;
			case 25:
				return $this->getControlPrecios();
				break;
			case 26:
				return $this->getControlCalidad();
				break;
			case 27:
				return $this->getControlCantidad();
				break;
			case 28:
				return $this->getCerrada();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RecepcionPedidoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNotaPedidoId(),
			$keys[2] => $this->getFecha(),
			$keys[3] => $this->getRecibeId(),
			$keys[4] => $this->getControlaId(),
			$keys[5] => $this->getAdministraId(),
			$keys[6] => $this->getProveedorFactura(),
			$keys[7] => $this->getProveedorRemito(),
			$keys[8] => $this->getTransportistaId(),
			$keys[9] => $this->getTransportistaNumeroGuia(),
			$keys[10] => $this->getTransportistaBultos(),
			$keys[11] => $this->getRemitoProveedor(),
			$keys[12] => $this->getCertificadoCalidad(),
			$keys[13] => $this->getFactura(),
			$keys[14] => $this->getManuales(),
			$keys[15] => $this->getEnsayos(),
			$keys[16] => $this->getCertConformidad(),
			$keys[17] => $this->getMsds(),
			$keys[18] => $this->getOtros(),
			$keys[19] => $this->getOtrosDescripcion(),
			$keys[20] => $this->getErrorEnvio(),
			$keys[21] => $this->getErrorEnvioDesc(),
			$keys[22] => $this->getRechazado(),
			$keys[23] => $this->getRechazadoDesc(),
			$keys[24] => $this->getControlItems(),
			$keys[25] => $this->getControlPrecios(),
			$keys[26] => $this->getControlCalidad(),
			$keys[27] => $this->getControlCantidad(),
			$keys[28] => $this->getCerrada(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RecepcionPedidoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNotaPedidoId($value);
				break;
			case 2:
				$this->setFecha($value);
				break;
			case 3:
				$this->setRecibeId($value);
				break;
			case 4:
				$this->setControlaId($value);
				break;
			case 5:
				$this->setAdministraId($value);
				break;
			case 6:
				$this->setProveedorFactura($value);
				break;
			case 7:
				$this->setProveedorRemito($value);
				break;
			case 8:
				$this->setTransportistaId($value);
				break;
			case 9:
				$this->setTransportistaNumeroGuia($value);
				break;
			case 10:
				$this->setTransportistaBultos($value);
				break;
			case 11:
				$this->setRemitoProveedor($value);
				break;
			case 12:
				$this->setCertificadoCalidad($value);
				break;
			case 13:
				$this->setFactura($value);
				break;
			case 14:
				$this->setManuales($value);
				break;
			case 15:
				$this->setEnsayos($value);
				break;
			case 16:
				$this->setCertConformidad($value);
				break;
			case 17:
				$this->setMsds($value);
				break;
			case 18:
				$this->setOtros($value);
				break;
			case 19:
				$this->setOtrosDescripcion($value);
				break;
			case 20:
				$this->setErrorEnvio($value);
				break;
			case 21:
				$this->setErrorEnvioDesc($value);
				break;
			case 22:
				$this->setRechazado($value);
				break;
			case 23:
				$this->setRechazadoDesc($value);
				break;
			case 24:
				$this->setControlItems($value);
				break;
			case 25:
				$this->setControlPrecios($value);
				break;
			case 26:
				$this->setControlCalidad($value);
				break;
			case 27:
				$this->setControlCantidad($value);
				break;
			case 28:
				$this->setCerrada($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RecepcionPedidoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNotaPedidoId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFecha($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRecibeId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setControlaId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAdministraId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setProveedorFactura($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setProveedorRemito($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTransportistaId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTransportistaNumeroGuia($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTransportistaBultos($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setRemitoProveedor($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCertificadoCalidad($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFactura($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setManuales($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setEnsayos($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCertConformidad($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMsds($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setOtros($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOtrosDescripcion($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setErrorEnvio($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setErrorEnvioDesc($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRechazado($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setRechazadoDesc($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setControlItems($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setControlPrecios($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setControlCalidad($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setControlCantidad($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCerrada($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);

		if ($this->isColumnModified(RecepcionPedidoPeer::ID)) $criteria->add(RecepcionPedidoPeer::ID, $this->id);
		if ($this->isColumnModified(RecepcionPedidoPeer::NOTA_PEDIDO_ID)) $criteria->add(RecepcionPedidoPeer::NOTA_PEDIDO_ID, $this->nota_pedido_id);
		if ($this->isColumnModified(RecepcionPedidoPeer::FECHA)) $criteria->add(RecepcionPedidoPeer::FECHA, $this->fecha);
		if ($this->isColumnModified(RecepcionPedidoPeer::RECIBE_ID)) $criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->recibe_id);
		if ($this->isColumnModified(RecepcionPedidoPeer::CONTROLA_ID)) $criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->controla_id);
		if ($this->isColumnModified(RecepcionPedidoPeer::ADMINISTRA_ID)) $criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->administra_id);
		if ($this->isColumnModified(RecepcionPedidoPeer::PROVEEDOR_FACTURA)) $criteria->add(RecepcionPedidoPeer::PROVEEDOR_FACTURA, $this->proveedor_factura);
		if ($this->isColumnModified(RecepcionPedidoPeer::PROVEEDOR_REMITO)) $criteria->add(RecepcionPedidoPeer::PROVEEDOR_REMITO, $this->proveedor_remito);
		if ($this->isColumnModified(RecepcionPedidoPeer::TRANSPORTISTA_ID)) $criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_ID, $this->transportista_id);
		if ($this->isColumnModified(RecepcionPedidoPeer::TRANSPORTISTA_NUMERO_GUIA)) $criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_NUMERO_GUIA, $this->transportista_numero_guia);
		if ($this->isColumnModified(RecepcionPedidoPeer::TRANSPORTISTA_BULTOS)) $criteria->add(RecepcionPedidoPeer::TRANSPORTISTA_BULTOS, $this->transportista_bultos);
		if ($this->isColumnModified(RecepcionPedidoPeer::REMITO_PROVEEDOR)) $criteria->add(RecepcionPedidoPeer::REMITO_PROVEEDOR, $this->remito_proveedor);
		if ($this->isColumnModified(RecepcionPedidoPeer::CERTIFICADO_CALIDAD)) $criteria->add(RecepcionPedidoPeer::CERTIFICADO_CALIDAD, $this->certificado_calidad);
		if ($this->isColumnModified(RecepcionPedidoPeer::FACTURA)) $criteria->add(RecepcionPedidoPeer::FACTURA, $this->factura);
		if ($this->isColumnModified(RecepcionPedidoPeer::MANUALES)) $criteria->add(RecepcionPedidoPeer::MANUALES, $this->manuales);
		if ($this->isColumnModified(RecepcionPedidoPeer::ENSAYOS)) $criteria->add(RecepcionPedidoPeer::ENSAYOS, $this->ensayos);
		if ($this->isColumnModified(RecepcionPedidoPeer::CERT_CONFORMIDAD)) $criteria->add(RecepcionPedidoPeer::CERT_CONFORMIDAD, $this->cert_conformidad);
		if ($this->isColumnModified(RecepcionPedidoPeer::MSDS)) $criteria->add(RecepcionPedidoPeer::MSDS, $this->msds);
		if ($this->isColumnModified(RecepcionPedidoPeer::OTROS)) $criteria->add(RecepcionPedidoPeer::OTROS, $this->otros);
		if ($this->isColumnModified(RecepcionPedidoPeer::OTROS_DESCRIPCION)) $criteria->add(RecepcionPedidoPeer::OTROS_DESCRIPCION, $this->otros_descripcion);
		if ($this->isColumnModified(RecepcionPedidoPeer::ERROR_ENVIO)) $criteria->add(RecepcionPedidoPeer::ERROR_ENVIO, $this->error_envio);
		if ($this->isColumnModified(RecepcionPedidoPeer::ERROR_ENVIO_DESC)) $criteria->add(RecepcionPedidoPeer::ERROR_ENVIO_DESC, $this->error_envio_desc);
		if ($this->isColumnModified(RecepcionPedidoPeer::RECHAZADO)) $criteria->add(RecepcionPedidoPeer::RECHAZADO, $this->rechazado);
		if ($this->isColumnModified(RecepcionPedidoPeer::RECHAZADO_DESC)) $criteria->add(RecepcionPedidoPeer::RECHAZADO_DESC, $this->rechazado_desc);
		if ($this->isColumnModified(RecepcionPedidoPeer::CONTROL_ITEMS)) $criteria->add(RecepcionPedidoPeer::CONTROL_ITEMS, $this->control_items);
		if ($this->isColumnModified(RecepcionPedidoPeer::CONTROL_PRECIOS)) $criteria->add(RecepcionPedidoPeer::CONTROL_PRECIOS, $this->control_precios);
		if ($this->isColumnModified(RecepcionPedidoPeer::CONTROL_CALIDAD)) $criteria->add(RecepcionPedidoPeer::CONTROL_CALIDAD, $this->control_calidad);
		if ($this->isColumnModified(RecepcionPedidoPeer::CONTROL_CANTIDAD)) $criteria->add(RecepcionPedidoPeer::CONTROL_CANTIDAD, $this->control_cantidad);
		if ($this->isColumnModified(RecepcionPedidoPeer::CERRADA)) $criteria->add(RecepcionPedidoPeer::CERRADA, $this->cerrada);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);

		$criteria->add(RecepcionPedidoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RecepcionPedido (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNotaPedidoId($this->nota_pedido_id);

		$copyObj->setFecha($this->fecha);

		$copyObj->setRecibeId($this->recibe_id);

		$copyObj->setControlaId($this->controla_id);

		$copyObj->setAdministraId($this->administra_id);

		$copyObj->setProveedorFactura($this->proveedor_factura);

		$copyObj->setProveedorRemito($this->proveedor_remito);

		$copyObj->setTransportistaId($this->transportista_id);

		$copyObj->setTransportistaNumeroGuia($this->transportista_numero_guia);

		$copyObj->setTransportistaBultos($this->transportista_bultos);

		$copyObj->setRemitoProveedor($this->remito_proveedor);

		$copyObj->setCertificadoCalidad($this->certificado_calidad);

		$copyObj->setFactura($this->factura);

		$copyObj->setManuales($this->manuales);

		$copyObj->setEnsayos($this->ensayos);

		$copyObj->setCertConformidad($this->cert_conformidad);

		$copyObj->setMsds($this->msds);

		$copyObj->setOtros($this->otros);

		$copyObj->setOtrosDescripcion($this->otros_descripcion);

		$copyObj->setErrorEnvio($this->error_envio);

		$copyObj->setErrorEnvioDesc($this->error_envio_desc);

		$copyObj->setRechazado($this->rechazado);

		$copyObj->setRechazadoDesc($this->rechazado_desc);

		$copyObj->setControlItems($this->control_items);

		$copyObj->setControlPrecios($this->control_precios);

		$copyObj->setControlCalidad($this->control_calidad);

		$copyObj->setControlCantidad($this->control_cantidad);

		$copyObj->setCerrada($this->cerrada);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCompraEstados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompraEstado($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RecepcionPedido Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RecepcionPedidoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RecepcionPedidoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a NotaPedido object.
	 *
	 * @param      NotaPedido $v
	 * @return     RecepcionPedido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setNotaPedido(NotaPedido $v = null)
	{
		if ($v === null) {
			$this->setNotaPedidoId(NULL);
		} else {
			$this->setNotaPedidoId($v->getId());
		}

		$this->aNotaPedido = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the NotaPedido object, it will not be re-added.
		if ($v !== null) {
			$v->addRecepcionPedido($this);
		}

		return $this;
	}


	/**
	 * Get the associated NotaPedido object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     NotaPedido The associated NotaPedido object.
	 * @throws     PropelException
	 */
	public function getNotaPedido(PropelPDO $con = null)
	{
		if ($this->aNotaPedido === null && ($this->nota_pedido_id !== null)) {
			$c = new Criteria(NotaPedidoPeer::DATABASE_NAME);
			$c->add(NotaPedidoPeer::ID, $this->nota_pedido_id);
			$this->aNotaPedido = NotaPedidoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aNotaPedido->addRecepcionPedidos($this);
			 */
		}
		return $this->aNotaPedido;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     RecepcionPedido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByRecibeId(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setRecibeId(NULL);
		} else {
			$this->setRecibeId($v->getId());
		}

		$this->asfGuardUserRelatedByRecibeId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addRecepcionPedidoRelatedByRecibeId($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByRecibeId(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByRecibeId === null && ($this->recibe_id !== null)) {
			$c = new Criteria(sfGuardUserPeer::DATABASE_NAME);
			$c->add(sfGuardUserPeer::ID, $this->recibe_id);
			$this->asfGuardUserRelatedByRecibeId = sfGuardUserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByRecibeId->addRecepcionPedidosRelatedByRecibeId($this);
			 */
		}
		return $this->asfGuardUserRelatedByRecibeId;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     RecepcionPedido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByControlaId(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setControlaId(NULL);
		} else {
			$this->setControlaId($v->getId());
		}

		$this->asfGuardUserRelatedByControlaId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addRecepcionPedidoRelatedByControlaId($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByControlaId(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByControlaId === null && ($this->controla_id !== null)) {
			$c = new Criteria(sfGuardUserPeer::DATABASE_NAME);
			$c->add(sfGuardUserPeer::ID, $this->controla_id);
			$this->asfGuardUserRelatedByControlaId = sfGuardUserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByControlaId->addRecepcionPedidosRelatedByControlaId($this);
			 */
		}
		return $this->asfGuardUserRelatedByControlaId;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     RecepcionPedido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByAdministraId(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setAdministraId(NULL);
		} else {
			$this->setAdministraId($v->getId());
		}

		$this->asfGuardUserRelatedByAdministraId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addRecepcionPedidoRelatedByAdministraId($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByAdministraId(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByAdministraId === null && ($this->administra_id !== null)) {
			$c = new Criteria(sfGuardUserPeer::DATABASE_NAME);
			$c->add(sfGuardUserPeer::ID, $this->administra_id);
			$this->asfGuardUserRelatedByAdministraId = sfGuardUserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByAdministraId->addRecepcionPedidosRelatedByAdministraId($this);
			 */
		}
		return $this->asfGuardUserRelatedByAdministraId;
	}

	/**
	 * Declares an association between this object and a Proveedor object.
	 *
	 * @param      Proveedor $v
	 * @return     RecepcionPedido The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProveedor(Proveedor $v = null)
	{
		if ($v === null) {
			$this->setTransportistaId(NULL);
		} else {
			$this->setTransportistaId($v->getId());
		}

		$this->aProveedor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Proveedor object, it will not be re-added.
		if ($v !== null) {
			$v->addRecepcionPedido($this);
		}

		return $this;
	}


	/**
	 * Get the associated Proveedor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Proveedor The associated Proveedor object.
	 * @throws     PropelException
	 */
	public function getProveedor(PropelPDO $con = null)
	{
		if ($this->aProveedor === null && ($this->transportista_id !== null)) {
			$c = new Criteria(ProveedorPeer::DATABASE_NAME);
			$c->add(ProveedorPeer::ID, $this->transportista_id);
			$this->aProveedor = ProveedorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProveedor->addRecepcionPedidos($this);
			 */
		}
		return $this->aProveedor;
	}

	/**
	 * Clears out the collCompraEstados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompraEstados()
	 */
	public function clearCompraEstados()
	{
		$this->collCompraEstados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompraEstados collection (array).
	 *
	 * By default this just sets the collCompraEstados collection to an empty array (like clearcollCompraEstados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompraEstados()
	{
		$this->collCompraEstados = array();
	}

	/**
	 * Gets an array of CompraEstado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this RecepcionPedido has previously been saved, it will retrieve
	 * related CompraEstados from storage. If this RecepcionPedido is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompraEstado[]
	 * @throws     PropelException
	 */
	public function getCompraEstados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
			   $this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				CompraEstadoPeer::addSelectColumns($criteria);
				$this->collCompraEstados = CompraEstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				CompraEstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
					$this->collCompraEstados = CompraEstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;
		return $this->collCompraEstados;
	}

	/**
	 * Returns the number of related CompraEstado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompraEstado objects.
	 * @throws     PropelException
	 */
	public function countCompraEstados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				$count = CompraEstadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
					$count = CompraEstadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompraEstados);
				}
			} else {
				$count = count($this->collCompraEstados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompraEstado object to this object
	 * through the CompraEstado foreign key attribute.
	 *
	 * @param      CompraEstado $l CompraEstado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompraEstado(CompraEstado $l)
	{
		if ($this->collCompraEstados === null) {
			$this->initCompraEstados();
		}
		if (!in_array($l, $this->collCompraEstados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompraEstados, $l);
			$l->setRecepcionPedido($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this RecepcionPedido is new, it will return
	 * an empty collection; or if this RecepcionPedido has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in RecepcionPedido.
	 */
	public function getCompraEstadosJoinCompra($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinCompra($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinCompra($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this RecepcionPedido is new, it will return
	 * an empty collection; or if this RecepcionPedido has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in RecepcionPedido.
	 */
	public function getCompraEstadosJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this RecepcionPedido is new, it will return
	 * an empty collection; or if this RecepcionPedido has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in RecepcionPedido.
	 */
	public function getCompraEstadosJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(RecepcionPedidoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::NOTA_RECEPCION_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCompraEstados) {
				foreach ((array) $this->collCompraEstados as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCompraEstados = null;
			$this->aNotaPedido = null;
			$this->asfGuardUserRelatedByRecibeId = null;
			$this->asfGuardUserRelatedByControlaId = null;
			$this->asfGuardUserRelatedByAdministraId = null;
			$this->aProveedor = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRecepcionPedido:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRecepcionPedido::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRecepcionPedido
