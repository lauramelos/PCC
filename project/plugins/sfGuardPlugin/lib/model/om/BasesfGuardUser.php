<?php

/**
 * Base class that represents a row from the 'sf_guard_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jan 12 14:28:40 2010
 *
 * @package    plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUser extends BaseObject  implements Persistent {


  const PEER = 'sfGuardUserPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfGuardUserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the algorithm field.
	 * Note: this column has a database default value of: 'sha1'
	 * @var        string
	 */
	protected $algorithm;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_super_admin field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_super_admin;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedByAdministraId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedByAdministraId.
	 */
	private $lastNotaPedidoRelatedByAdministraIdCriteria = null;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedBySolicitaId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedBySolicitaId.
	 */
	private $lastNotaPedidoRelatedBySolicitaIdCriteria = null;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedByControlaId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedByControlaId.
	 */
	private $lastNotaPedidoRelatedByControlaIdCriteria = null;

	/**
	 * @var        array NotaPedido[] Collection to store aggregation of NotaPedido objects.
	 */
	protected $collNotaPedidosRelatedByAutorizaId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidosRelatedByAutorizaId.
	 */
	private $lastNotaPedidoRelatedByAutorizaIdCriteria = null;

	/**
	 * @var        array NotaPedidoEstado[] Collection to store aggregation of NotaPedidoEstado objects.
	 */
	protected $collNotaPedidoEstados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotaPedidoEstados.
	 */
	private $lastNotaPedidoEstadoCriteria = null;

	/**
	 * @var        array Evento[] Collection to store aggregation of Evento objects.
	 */
	protected $collEventos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEventos.
	 */
	private $lastEventoCriteria = null;

	/**
	 * @var        array CompraEstado[] Collection to store aggregation of CompraEstado objects.
	 */
	protected $collCompraEstados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompraEstados.
	 */
	private $lastCompraEstadoCriteria = null;

	/**
	 * @var        array Venta[] Collection to store aggregation of Venta objects.
	 */
	protected $collVentas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVentas.
	 */
	private $lastVentaCriteria = null;

	/**
	 * @var        array VentaEstado[] Collection to store aggregation of VentaEstado objects.
	 */
	protected $collVentaEstados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVentaEstados.
	 */
	private $lastVentaEstadoCriteria = null;

	/**
	 * @var        array sfGuardUserPermission[] Collection to store aggregation of sfGuardUserPermission objects.
	 */
	protected $collsfGuardUserPermissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserPermissions.
	 */
	private $lastsfGuardUserPermissionCriteria = null;

	/**
	 * @var        array sfGuardUserGroup[] Collection to store aggregation of sfGuardUserGroup objects.
	 */
	protected $collsfGuardUserGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserGroups.
	 */
	private $lastsfGuardUserGroupCriteria = null;

	/**
	 * @var        array sfGuardRememberKey[] Collection to store aggregation of sfGuardRememberKey objects.
	 */
	protected $collsfGuardRememberKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardRememberKeys.
	 */
	private $lastsfGuardRememberKeyCriteria = null;

	/**
	 * @var        array RecepcionPedido[] Collection to store aggregation of RecepcionPedido objects.
	 */
	protected $collRecepcionPedidosRelatedByRecibeId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecepcionPedidosRelatedByRecibeId.
	 */
	private $lastRecepcionPedidoRelatedByRecibeIdCriteria = null;

	/**
	 * @var        array RecepcionPedido[] Collection to store aggregation of RecepcionPedido objects.
	 */
	protected $collRecepcionPedidosRelatedByControlaId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecepcionPedidosRelatedByControlaId.
	 */
	private $lastRecepcionPedidoRelatedByControlaIdCriteria = null;

	/**
	 * @var        array RecepcionPedido[] Collection to store aggregation of RecepcionPedido objects.
	 */
	protected $collRecepcionPedidosRelatedByAdministraId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRecepcionPedidosRelatedByAdministraId.
	 */
	private $lastRecepcionPedidoRelatedByAdministraIdCriteria = null;

	/**
	 * @var        array UserProfile[] Collection to store aggregation of UserProfile objects.
	 */
	protected $collUserProfiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserProfiles.
	 */
	private $lastUserProfileCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasesfGuardUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->algorithm = 'sha1';
		$this->is_active = true;
		$this->is_super_admin = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [algorithm] column value.
	 * 
	 * @return     string
	 */
	public function getAlgorithm()
	{
		return $this->algorithm;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}


		if ($this->last_login === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_super_admin] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsSuperAdmin()
	{
		return $this->is_super_admin;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [algorithm] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setAlgorithm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->algorithm !== $v || $v === 'sha1') {
			$this->algorithm = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ALGORITHM;
		}

		return $this;
	} // setAlgorithm()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $v === true) {
			$this->is_active = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_super_admin] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsSuperAdmin($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_super_admin !== $v || $v === false) {
			$this->is_super_admin = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_SUPER_ADMIN;
		}

		return $this;
	} // setIsSuperAdmin()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(sfGuardUserPeer::ALGORITHM,sfGuardUserPeer::IS_ACTIVE,sfGuardUserPeer::IS_SUPER_ADMIN))) {
				return false;
			}

			if ($this->algorithm !== 'sha1') {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

			if ($this->is_super_admin !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->username = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->algorithm = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->salt = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->password = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->last_login = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->is_active = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->is_super_admin = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfGuardUser object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfGuardUserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collNotaPedidosRelatedByAdministraId = null;
			$this->lastNotaPedidoRelatedByAdministraIdCriteria = null;

			$this->collNotaPedidosRelatedBySolicitaId = null;
			$this->lastNotaPedidoRelatedBySolicitaIdCriteria = null;

			$this->collNotaPedidosRelatedByControlaId = null;
			$this->lastNotaPedidoRelatedByControlaIdCriteria = null;

			$this->collNotaPedidosRelatedByAutorizaId = null;
			$this->lastNotaPedidoRelatedByAutorizaIdCriteria = null;

			$this->collNotaPedidoEstados = null;
			$this->lastNotaPedidoEstadoCriteria = null;

			$this->collEventos = null;
			$this->lastEventoCriteria = null;

			$this->collCompraEstados = null;
			$this->lastCompraEstadoCriteria = null;

			$this->collVentas = null;
			$this->lastVentaCriteria = null;

			$this->collVentaEstados = null;
			$this->lastVentaEstadoCriteria = null;

			$this->collsfGuardUserPermissions = null;
			$this->lastsfGuardUserPermissionCriteria = null;

			$this->collsfGuardUserGroups = null;
			$this->lastsfGuardUserGroupCriteria = null;

			$this->collsfGuardRememberKeys = null;
			$this->lastsfGuardRememberKeyCriteria = null;

			$this->collRecepcionPedidosRelatedByRecibeId = null;
			$this->lastRecepcionPedidoRelatedByRecibeIdCriteria = null;

			$this->collRecepcionPedidosRelatedByControlaId = null;
			$this->lastRecepcionPedidoRelatedByControlaIdCriteria = null;

			$this->collRecepcionPedidosRelatedByAdministraId = null;
			$this->lastRecepcionPedidoRelatedByAdministraIdCriteria = null;

			$this->collUserProfiles = null;
			$this->lastUserProfileCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasesfGuardUser:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			sfGuardUserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasesfGuardUser:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasesfGuardUser:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(sfGuardUserPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasesfGuardUser:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			sfGuardUserPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfGuardUserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = sfGuardUserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += sfGuardUserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collNotaPedidosRelatedByAdministraId !== null) {
				foreach ($this->collNotaPedidosRelatedByAdministraId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotaPedidosRelatedBySolicitaId !== null) {
				foreach ($this->collNotaPedidosRelatedBySolicitaId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotaPedidosRelatedByControlaId !== null) {
				foreach ($this->collNotaPedidosRelatedByControlaId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotaPedidosRelatedByAutorizaId !== null) {
				foreach ($this->collNotaPedidosRelatedByAutorizaId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotaPedidoEstados !== null) {
				foreach ($this->collNotaPedidoEstados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEventos !== null) {
				foreach ($this->collEventos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompraEstados !== null) {
				foreach ($this->collCompraEstados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVentas !== null) {
				foreach ($this->collVentas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVentaEstados !== null) {
				foreach ($this->collVentaEstados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserPermissions !== null) {
				foreach ($this->collsfGuardUserPermissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserGroups !== null) {
				foreach ($this->collsfGuardUserGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardRememberKeys !== null) {
				foreach ($this->collsfGuardRememberKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecepcionPedidosRelatedByRecibeId !== null) {
				foreach ($this->collRecepcionPedidosRelatedByRecibeId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecepcionPedidosRelatedByControlaId !== null) {
				foreach ($this->collRecepcionPedidosRelatedByControlaId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRecepcionPedidosRelatedByAdministraId !== null) {
				foreach ($this->collRecepcionPedidosRelatedByAdministraId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserProfiles !== null) {
				foreach ($this->collUserProfiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = sfGuardUserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collNotaPedidosRelatedByAdministraId !== null) {
					foreach ($this->collNotaPedidosRelatedByAdministraId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotaPedidosRelatedBySolicitaId !== null) {
					foreach ($this->collNotaPedidosRelatedBySolicitaId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotaPedidosRelatedByControlaId !== null) {
					foreach ($this->collNotaPedidosRelatedByControlaId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotaPedidosRelatedByAutorizaId !== null) {
					foreach ($this->collNotaPedidosRelatedByAutorizaId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotaPedidoEstados !== null) {
					foreach ($this->collNotaPedidoEstados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEventos !== null) {
					foreach ($this->collEventos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompraEstados !== null) {
					foreach ($this->collCompraEstados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVentas !== null) {
					foreach ($this->collVentas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVentaEstados !== null) {
					foreach ($this->collVentaEstados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserPermissions !== null) {
					foreach ($this->collsfGuardUserPermissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserGroups !== null) {
					foreach ($this->collsfGuardUserGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardRememberKeys !== null) {
					foreach ($this->collsfGuardRememberKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecepcionPedidosRelatedByRecibeId !== null) {
					foreach ($this->collRecepcionPedidosRelatedByRecibeId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecepcionPedidosRelatedByControlaId !== null) {
					foreach ($this->collRecepcionPedidosRelatedByControlaId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRecepcionPedidosRelatedByAdministraId !== null) {
					foreach ($this->collRecepcionPedidosRelatedByAdministraId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserProfiles !== null) {
					foreach ($this->collUserProfiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUsername();
				break;
			case 2:
				return $this->getAlgorithm();
				break;
			case 3:
				return $this->getSalt();
				break;
			case 4:
				return $this->getPassword();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getLastLogin();
				break;
			case 7:
				return $this->getIsActive();
				break;
			case 8:
				return $this->getIsSuperAdmin();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUsername(),
			$keys[2] => $this->getAlgorithm(),
			$keys[3] => $this->getSalt(),
			$keys[4] => $this->getPassword(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getLastLogin(),
			$keys[7] => $this->getIsActive(),
			$keys[8] => $this->getIsSuperAdmin(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUsername($value);
				break;
			case 2:
				$this->setAlgorithm($value);
				break;
			case 3:
				$this->setSalt($value);
				break;
			case 4:
				$this->setPassword($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setLastLogin($value);
				break;
			case 7:
				$this->setIsActive($value);
				break;
			case 8:
				$this->setIsSuperAdmin($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsername($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAlgorithm($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSalt($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPassword($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLastLogin($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIsActive($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIsSuperAdmin($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfGuardUserPeer::ID)) $criteria->add(sfGuardUserPeer::ID, $this->id);
		if ($this->isColumnModified(sfGuardUserPeer::USERNAME)) $criteria->add(sfGuardUserPeer::USERNAME, $this->username);
		if ($this->isColumnModified(sfGuardUserPeer::ALGORITHM)) $criteria->add(sfGuardUserPeer::ALGORITHM, $this->algorithm);
		if ($this->isColumnModified(sfGuardUserPeer::SALT)) $criteria->add(sfGuardUserPeer::SALT, $this->salt);
		if ($this->isColumnModified(sfGuardUserPeer::PASSWORD)) $criteria->add(sfGuardUserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(sfGuardUserPeer::CREATED_AT)) $criteria->add(sfGuardUserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(sfGuardUserPeer::LAST_LOGIN)) $criteria->add(sfGuardUserPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(sfGuardUserPeer::IS_ACTIVE)) $criteria->add(sfGuardUserPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(sfGuardUserPeer::IS_SUPER_ADMIN)) $criteria->add(sfGuardUserPeer::IS_SUPER_ADMIN, $this->is_super_admin);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		$criteria->add(sfGuardUserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfGuardUser (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUsername($this->username);

		$copyObj->setAlgorithm($this->algorithm);

		$copyObj->setSalt($this->salt);

		$copyObj->setPassword($this->password);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsSuperAdmin($this->is_super_admin);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getNotaPedidosRelatedByAdministraId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedByAdministraId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotaPedidosRelatedBySolicitaId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedBySolicitaId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotaPedidosRelatedByControlaId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedByControlaId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotaPedidosRelatedByAutorizaId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoRelatedByAutorizaId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotaPedidoEstados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotaPedidoEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEventos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEvento($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompraEstados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompraEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVentas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVenta($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVentaEstados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVentaEstado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserPermissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserPermission($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardRememberKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardRememberKey($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecepcionPedidosRelatedByRecibeId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecepcionPedidoRelatedByRecibeId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecepcionPedidosRelatedByControlaId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecepcionPedidoRelatedByControlaId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRecepcionPedidosRelatedByAdministraId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRecepcionPedidoRelatedByAdministraId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserProfiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserProfile($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfGuardUser Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfGuardUserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfGuardUserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collNotaPedidosRelatedByAdministraId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedByAdministraId()
	 */
	public function clearNotaPedidosRelatedByAdministraId()
	{
		$this->collNotaPedidosRelatedByAdministraId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedByAdministraId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedByAdministraId collection to an empty array (like clearcollNotaPedidosRelatedByAdministraId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedByAdministraId()
	{
		$this->collNotaPedidosRelatedByAdministraId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotaPedidosRelatedByAdministraId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedByAdministraId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedByAdministraIdCriteria) || !$this->lastNotaPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedByAdministraIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedByAdministraId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedByAdministraId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedByAdministraIdCriteria) || !$this->lastNotaPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedByAdministraId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedByAdministraId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedByAdministraId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			$this->initNotaPedidosRelatedByAdministraId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedByAdministraId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedByAdministraId, $l);
			$l->setsfGuardUserRelatedByAdministraId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAdministraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAdministraIdJoinProveedorRelatedByProveedorId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAdministraIdCriteria) || !$this->lastNotaPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAdministraIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAdministraId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAdministraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAdministraIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAdministraIdCriteria) || !$this->lastNotaPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAdministraIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAdministraId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAdministraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAdministraIdJoinProveedorRelatedByTransporteId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::ADMINISTRA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAdministraIdCriteria) || !$this->lastNotaPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAdministraId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAdministraIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAdministraId;
	}

	/**
	 * Clears out the collNotaPedidosRelatedBySolicitaId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedBySolicitaId()
	 */
	public function clearNotaPedidosRelatedBySolicitaId()
	{
		$this->collNotaPedidosRelatedBySolicitaId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedBySolicitaId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedBySolicitaId collection to an empty array (like clearcollNotaPedidosRelatedBySolicitaId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedBySolicitaId()
	{
		$this->collNotaPedidosRelatedBySolicitaId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotaPedidosRelatedBySolicitaId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedBySolicitaId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedBySolicitaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedBySolicitaIdCriteria) || !$this->lastNotaPedidoRelatedBySolicitaIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedBySolicitaIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedBySolicitaId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedBySolicitaId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedBySolicitaIdCriteria) || !$this->lastNotaPedidoRelatedBySolicitaIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedBySolicitaId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedBySolicitaId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedBySolicitaId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			$this->initNotaPedidosRelatedBySolicitaId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedBySolicitaId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedBySolicitaId, $l);
			$l->setsfGuardUserRelatedBySolicitaId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedBySolicitaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedBySolicitaIdJoinProveedorRelatedByProveedorId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedBySolicitaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedBySolicitaIdCriteria) || !$this->lastNotaPedidoRelatedBySolicitaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedBySolicitaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedBySolicitaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedBySolicitaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedBySolicitaIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedBySolicitaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedBySolicitaIdCriteria) || !$this->lastNotaPedidoRelatedBySolicitaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedBySolicitaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedBySolicitaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedBySolicitaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedBySolicitaIdJoinProveedorRelatedByTransporteId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedBySolicitaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedBySolicitaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::SOLICITA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedBySolicitaIdCriteria) || !$this->lastNotaPedidoRelatedBySolicitaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedBySolicitaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedBySolicitaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedBySolicitaId;
	}

	/**
	 * Clears out the collNotaPedidosRelatedByControlaId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedByControlaId()
	 */
	public function clearNotaPedidosRelatedByControlaId()
	{
		$this->collNotaPedidosRelatedByControlaId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedByControlaId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedByControlaId collection to an empty array (like clearcollNotaPedidosRelatedByControlaId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedByControlaId()
	{
		$this->collNotaPedidosRelatedByControlaId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotaPedidosRelatedByControlaId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedByControlaId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedByControlaIdCriteria) || !$this->lastNotaPedidoRelatedByControlaIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedByControlaIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedByControlaId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedByControlaId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedByControlaIdCriteria) || !$this->lastNotaPedidoRelatedByControlaIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedByControlaId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedByControlaId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedByControlaId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedByControlaId === null) {
			$this->initNotaPedidosRelatedByControlaId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedByControlaId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedByControlaId, $l);
			$l->setsfGuardUserRelatedByControlaId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByControlaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByControlaIdJoinProveedorRelatedByProveedorId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByControlaIdCriteria) || !$this->lastNotaPedidoRelatedByControlaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByControlaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByControlaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByControlaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByControlaIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByControlaIdCriteria) || !$this->lastNotaPedidoRelatedByControlaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByControlaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByControlaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByControlaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByControlaIdJoinProveedorRelatedByTransporteId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::CONTROLA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByControlaIdCriteria) || !$this->lastNotaPedidoRelatedByControlaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByControlaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByControlaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByControlaId;
	}

	/**
	 * Clears out the collNotaPedidosRelatedByAutorizaId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidosRelatedByAutorizaId()
	 */
	public function clearNotaPedidosRelatedByAutorizaId()
	{
		$this->collNotaPedidosRelatedByAutorizaId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidosRelatedByAutorizaId collection (array).
	 *
	 * By default this just sets the collNotaPedidosRelatedByAutorizaId collection to an empty array (like clearcollNotaPedidosRelatedByAutorizaId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidosRelatedByAutorizaId()
	{
		$this->collNotaPedidosRelatedByAutorizaId = array();
	}

	/**
	 * Gets an array of NotaPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotaPedidosRelatedByAutorizaId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedido[]
	 * @throws     PropelException
	 */
	public function getNotaPedidosRelatedByAutorizaId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidosRelatedByAutorizaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				NotaPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoRelatedByAutorizaIdCriteria) || !$this->lastNotaPedidoRelatedByAutorizaIdCriteria->equals($criteria)) {
					$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoRelatedByAutorizaIdCriteria = $criteria;
		return $this->collNotaPedidosRelatedByAutorizaId;
	}

	/**
	 * Returns the number of related NotaPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedido objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidosRelatedByAutorizaId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				$count = NotaPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				if (!isset($this->lastNotaPedidoRelatedByAutorizaIdCriteria) || !$this->lastNotaPedidoRelatedByAutorizaIdCriteria->equals($criteria)) {
					$count = NotaPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidosRelatedByAutorizaId);
				}
			} else {
				$count = count($this->collNotaPedidosRelatedByAutorizaId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedido object to this object
	 * through the NotaPedido foreign key attribute.
	 *
	 * @param      NotaPedido $l NotaPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoRelatedByAutorizaId(NotaPedido $l)
	{
		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			$this->initNotaPedidosRelatedByAutorizaId();
		}
		if (!in_array($l, $this->collNotaPedidosRelatedByAutorizaId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidosRelatedByAutorizaId, $l);
			$l->setsfGuardUserRelatedByAutorizaId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAutorizaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAutorizaIdJoinProveedorRelatedByProveedorId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAutorizaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAutorizaIdCriteria) || !$this->lastNotaPedidoRelatedByAutorizaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByProveedorId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAutorizaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAutorizaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAutorizaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAutorizaIdJoinFormasDePago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAutorizaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAutorizaIdCriteria) || !$this->lastNotaPedidoRelatedByAutorizaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinFormasDePago($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAutorizaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAutorizaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidosRelatedByAutorizaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidosRelatedByAutorizaIdJoinProveedorRelatedByTransporteId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidosRelatedByAutorizaId === null) {
			if ($this->isNew()) {
				$this->collNotaPedidosRelatedByAutorizaId = array();
			} else {

				$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoPeer::AUTORIZA_ID, $this->id);

			if (!isset($this->lastNotaPedidoRelatedByAutorizaIdCriteria) || !$this->lastNotaPedidoRelatedByAutorizaIdCriteria->equals($criteria)) {
				$this->collNotaPedidosRelatedByAutorizaId = NotaPedidoPeer::doSelectJoinProveedorRelatedByTransporteId($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoRelatedByAutorizaIdCriteria = $criteria;

		return $this->collNotaPedidosRelatedByAutorizaId;
	}

	/**
	 * Clears out the collNotaPedidoEstados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotaPedidoEstados()
	 */
	public function clearNotaPedidoEstados()
	{
		$this->collNotaPedidoEstados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotaPedidoEstados collection (array).
	 *
	 * By default this just sets the collNotaPedidoEstados collection to an empty array (like clearcollNotaPedidoEstados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotaPedidoEstados()
	{
		$this->collNotaPedidoEstados = array();
	}

	/**
	 * Gets an array of NotaPedidoEstado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotaPedidoEstados from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NotaPedidoEstado[]
	 * @throws     PropelException
	 */
	public function getNotaPedidoEstados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidoEstados === null) {
			if ($this->isNew()) {
			   $this->collNotaPedidoEstados = array();
			} else {

				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				NotaPedidoEstadoPeer::addSelectColumns($criteria);
				$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				NotaPedidoEstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotaPedidoEstadoCriteria) || !$this->lastNotaPedidoEstadoCriteria->equals($criteria)) {
					$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotaPedidoEstadoCriteria = $criteria;
		return $this->collNotaPedidoEstados;
	}

	/**
	 * Returns the number of related NotaPedidoEstado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NotaPedidoEstado objects.
	 * @throws     PropelException
	 */
	public function countNotaPedidoEstados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotaPedidoEstados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				$count = NotaPedidoEstadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				if (!isset($this->lastNotaPedidoEstadoCriteria) || !$this->lastNotaPedidoEstadoCriteria->equals($criteria)) {
					$count = NotaPedidoEstadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNotaPedidoEstados);
				}
			} else {
				$count = count($this->collNotaPedidoEstados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NotaPedidoEstado object to this object
	 * through the NotaPedidoEstado foreign key attribute.
	 *
	 * @param      NotaPedidoEstado $l NotaPedidoEstado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotaPedidoEstado(NotaPedidoEstado $l)
	{
		if ($this->collNotaPedidoEstados === null) {
			$this->initNotaPedidoEstados();
		}
		if (!in_array($l, $this->collNotaPedidoEstados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotaPedidoEstados, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidoEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidoEstadosJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidoEstados === null) {
			if ($this->isNew()) {
				$this->collNotaPedidoEstados = array();
			} else {

				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastNotaPedidoEstadoCriteria) || !$this->lastNotaPedidoEstadoCriteria->equals($criteria)) {
				$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoEstadoCriteria = $criteria;

		return $this->collNotaPedidoEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related NotaPedidoEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getNotaPedidoEstadosJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotaPedidoEstados === null) {
			if ($this->isNew()) {
				$this->collNotaPedidoEstados = array();
			} else {

				$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

				$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotaPedidoEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastNotaPedidoEstadoCriteria) || !$this->lastNotaPedidoEstadoCriteria->equals($criteria)) {
				$this->collNotaPedidoEstados = NotaPedidoEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotaPedidoEstadoCriteria = $criteria;

		return $this->collNotaPedidoEstados;
	}

	/**
	 * Clears out the collEventos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEventos()
	 */
	public function clearEventos()
	{
		$this->collEventos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEventos collection (array).
	 *
	 * By default this just sets the collEventos collection to an empty array (like clearcollEventos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEventos()
	{
		$this->collEventos = array();
	}

	/**
	 * Gets an array of Evento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Eventos from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Evento[]
	 * @throws     PropelException
	 */
	public function getEventos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventos === null) {
			if ($this->isNew()) {
			   $this->collEventos = array();
			} else {

				$criteria->add(EventoPeer::USER_ID, $this->id);

				EventoPeer::addSelectColumns($criteria);
				$this->collEventos = EventoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventoPeer::USER_ID, $this->id);

				EventoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventoCriteria) || !$this->lastEventoCriteria->equals($criteria)) {
					$this->collEventos = EventoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventoCriteria = $criteria;
		return $this->collEventos;
	}

	/**
	 * Returns the number of related Evento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Evento objects.
	 * @throws     PropelException
	 */
	public function countEventos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEventos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventoPeer::USER_ID, $this->id);

				$count = EventoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventoPeer::USER_ID, $this->id);

				if (!isset($this->lastEventoCriteria) || !$this->lastEventoCriteria->equals($criteria)) {
					$count = EventoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEventos);
				}
			} else {
				$count = count($this->collEventos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Evento object to this object
	 * through the Evento foreign key attribute.
	 *
	 * @param      Evento $l Evento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEvento(Evento $l)
	{
		if ($this->collEventos === null) {
			$this->initEventos();
		}
		if (!in_array($l, $this->collEventos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEventos, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related Eventos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEventosJoinProducto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEventos === null) {
			if ($this->isNew()) {
				$this->collEventos = array();
			} else {

				$criteria->add(EventoPeer::USER_ID, $this->id);

				$this->collEventos = EventoPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventoPeer::USER_ID, $this->id);

			if (!isset($this->lastEventoCriteria) || !$this->lastEventoCriteria->equals($criteria)) {
				$this->collEventos = EventoPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventoCriteria = $criteria;

		return $this->collEventos;
	}

	/**
	 * Clears out the collCompraEstados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompraEstados()
	 */
	public function clearCompraEstados()
	{
		$this->collCompraEstados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompraEstados collection (array).
	 *
	 * By default this just sets the collCompraEstados collection to an empty array (like clearcollCompraEstados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompraEstados()
	{
		$this->collCompraEstados = array();
	}

	/**
	 * Gets an array of CompraEstado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CompraEstados from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompraEstado[]
	 * @throws     PropelException
	 */
	public function getCompraEstados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
			   $this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				CompraEstadoPeer::addSelectColumns($criteria);
				$this->collCompraEstados = CompraEstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				CompraEstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
					$this->collCompraEstados = CompraEstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;
		return $this->collCompraEstados;
	}

	/**
	 * Returns the number of related CompraEstado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompraEstado objects.
	 * @throws     PropelException
	 */
	public function countCompraEstados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				$count = CompraEstadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
					$count = CompraEstadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompraEstados);
				}
			} else {
				$count = count($this->collCompraEstados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompraEstado object to this object
	 * through the CompraEstado foreign key attribute.
	 *
	 * @param      CompraEstado $l CompraEstado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompraEstado(CompraEstado $l)
	{
		if ($this->collCompraEstados === null) {
			$this->initCompraEstados();
		}
		if (!in_array($l, $this->collCompraEstados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompraEstados, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getCompraEstadosJoinCompra($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinCompra($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinCompra($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getCompraEstadosJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related CompraEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getCompraEstadosJoinRecepcionPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompraEstados === null) {
			if ($this->isNew()) {
				$this->collCompraEstados = array();
			} else {

				$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinRecepcionPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompraEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastCompraEstadoCriteria) || !$this->lastCompraEstadoCriteria->equals($criteria)) {
				$this->collCompraEstados = CompraEstadoPeer::doSelectJoinRecepcionPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompraEstadoCriteria = $criteria;

		return $this->collCompraEstados;
	}

	/**
	 * Clears out the collVentas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVentas()
	 */
	public function clearVentas()
	{
		$this->collVentas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVentas collection (array).
	 *
	 * By default this just sets the collVentas collection to an empty array (like clearcollVentas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVentas()
	{
		$this->collVentas = array();
	}

	/**
	 * Gets an array of Venta objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Ventas from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Venta[]
	 * @throws     PropelException
	 */
	public function getVentas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
			   $this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				VentaPeer::addSelectColumns($criteria);
				$this->collVentas = VentaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				VentaPeer::addSelectColumns($criteria);
				if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
					$this->collVentas = VentaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVentaCriteria = $criteria;
		return $this->collVentas;
	}

	/**
	 * Returns the number of related Venta objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Venta objects.
	 * @throws     PropelException
	 */
	public function countVentas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				$count = VentaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
					$count = VentaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVentas);
				}
			} else {
				$count = count($this->collVentas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Venta object to this object
	 * through the Venta foreign key attribute.
	 *
	 * @param      Venta $l Venta
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVenta(Venta $l)
	{
		if ($this->collVentas === null) {
			$this->initVentas();
		}
		if (!in_array($l, $this->collVentas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVentas, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getVentasJoinProducto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				$this->collVentas = VentaPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

			if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
				$this->collVentas = VentaPeer::doSelectJoinProducto($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaCriteria = $criteria;

		return $this->collVentas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related Ventas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getVentasJoinProveedor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentas === null) {
			if ($this->isNew()) {
				$this->collVentas = array();
			} else {

				$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

				$this->collVentas = VentaPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaPeer::TRANSPORTISTA_INTERNO_ID, $this->id);

			if (!isset($this->lastVentaCriteria) || !$this->lastVentaCriteria->equals($criteria)) {
				$this->collVentas = VentaPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaCriteria = $criteria;

		return $this->collVentas;
	}

	/**
	 * Clears out the collVentaEstados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVentaEstados()
	 */
	public function clearVentaEstados()
	{
		$this->collVentaEstados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVentaEstados collection (array).
	 *
	 * By default this just sets the collVentaEstados collection to an empty array (like clearcollVentaEstados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVentaEstados()
	{
		$this->collVentaEstados = array();
	}

	/**
	 * Gets an array of VentaEstado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related VentaEstados from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VentaEstado[]
	 * @throws     PropelException
	 */
	public function getVentaEstados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentaEstados === null) {
			if ($this->isNew()) {
			   $this->collVentaEstados = array();
			} else {

				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				VentaEstadoPeer::addSelectColumns($criteria);
				$this->collVentaEstados = VentaEstadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				VentaEstadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastVentaEstadoCriteria) || !$this->lastVentaEstadoCriteria->equals($criteria)) {
					$this->collVentaEstados = VentaEstadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVentaEstadoCriteria = $criteria;
		return $this->collVentaEstados;
	}

	/**
	 * Returns the number of related VentaEstado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VentaEstado objects.
	 * @throws     PropelException
	 */
	public function countVentaEstados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVentaEstados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				$count = VentaEstadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				if (!isset($this->lastVentaEstadoCriteria) || !$this->lastVentaEstadoCriteria->equals($criteria)) {
					$count = VentaEstadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVentaEstados);
				}
			} else {
				$count = count($this->collVentaEstados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VentaEstado object to this object
	 * through the VentaEstado foreign key attribute.
	 *
	 * @param      VentaEstado $l VentaEstado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVentaEstado(VentaEstado $l)
	{
		if ($this->collVentaEstados === null) {
			$this->initVentaEstados();
		}
		if (!in_array($l, $this->collVentaEstados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVentaEstados, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related VentaEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getVentaEstadosJoinVenta($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentaEstados === null) {
			if ($this->isNew()) {
				$this->collVentaEstados = array();
			} else {

				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				$this->collVentaEstados = VentaEstadoPeer::doSelectJoinVenta($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastVentaEstadoCriteria) || !$this->lastVentaEstadoCriteria->equals($criteria)) {
				$this->collVentaEstados = VentaEstadoPeer::doSelectJoinVenta($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaEstadoCriteria = $criteria;

		return $this->collVentaEstados;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related VentaEstados from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getVentaEstadosJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVentaEstados === null) {
			if ($this->isNew()) {
				$this->collVentaEstados = array();
			} else {

				$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

				$this->collVentaEstados = VentaEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VentaEstadoPeer::USER_ID, $this->id);

			if (!isset($this->lastVentaEstadoCriteria) || !$this->lastVentaEstadoCriteria->equals($criteria)) {
				$this->collVentaEstados = VentaEstadoPeer::doSelectJoinEstado($criteria, $con, $join_behavior);
			}
		}
		$this->lastVentaEstadoCriteria = $criteria;

		return $this->collVentaEstados;
	}

	/**
	 * Clears out the collsfGuardUserPermissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserPermissions()
	 */
	public function clearsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserPermissions collection (array).
	 *
	 * By default this just sets the collsfGuardUserPermissions collection to an empty array (like clearcollsfGuardUserPermissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = array();
	}

	/**
	 * Gets an array of sfGuardUserPermission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserPermissions from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserPermission[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserPermissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;
		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Returns the number of related sfGuardUserPermission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserPermission objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserPermissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$count = sfGuardUserPermissionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$count = sfGuardUserPermissionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collsfGuardUserPermissions);
				}
			} else {
				$count = count($this->collsfGuardUserPermissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserPermission object to this object
	 * through the sfGuardUserPermission foreign key attribute.
	 *
	 * @param      sfGuardUserPermission $l sfGuardUserPermission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserPermission(sfGuardUserPermission $l)
	{
		if ($this->collsfGuardUserPermissions === null) {
			$this->initsfGuardUserPermissions();
		}
		if (!in_array($l, $this->collsfGuardUserPermissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserPermissions, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserPermissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserPermissionsJoinsfGuardPermission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;

		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Clears out the collsfGuardUserGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserGroups()
	 */
	public function clearsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserGroups collection (array).
	 *
	 * By default this just sets the collsfGuardUserGroups collection to an empty array (like clearcollsfGuardUserGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = array();
	}

	/**
	 * Gets an array of sfGuardUserGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserGroups from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserGroup[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;
		return $this->collsfGuardUserGroups;
	}

	/**
	 * Returns the number of related sfGuardUserGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserGroup objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$count = sfGuardUserGroupPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$count = sfGuardUserGroupPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collsfGuardUserGroups);
				}
			} else {
				$count = count($this->collsfGuardUserGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserGroup object to this object
	 * through the sfGuardUserGroup foreign key attribute.
	 *
	 * @param      sfGuardUserGroup $l sfGuardUserGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserGroup(sfGuardUserGroup $l)
	{
		if ($this->collsfGuardUserGroups === null) {
			$this->initsfGuardUserGroups();
		}
		if (!in_array($l, $this->collsfGuardUserGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserGroups, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserGroupsJoinsfGuardGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;

		return $this->collsfGuardUserGroups;
	}

	/**
	 * Clears out the collsfGuardRememberKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardRememberKeys()
	 */
	public function clearsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardRememberKeys collection (array).
	 *
	 * By default this just sets the collsfGuardRememberKeys collection to an empty array (like clearcollsfGuardRememberKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = array();
	}

	/**
	 * Gets an array of sfGuardRememberKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardRememberKeys from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardRememberKey[]
	 * @throws     PropelException
	 */
	public function getsfGuardRememberKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
			   $this->collsfGuardRememberKeys = array();
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardRememberKeyCriteria = $criteria;
		return $this->collsfGuardRememberKeys;
	}

	/**
	 * Returns the number of related sfGuardRememberKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardRememberKey objects.
	 * @throws     PropelException
	 */
	public function countsfGuardRememberKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				$count = sfGuardRememberKeyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$count = sfGuardRememberKeyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collsfGuardRememberKeys);
				}
			} else {
				$count = count($this->collsfGuardRememberKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardRememberKey object to this object
	 * through the sfGuardRememberKey foreign key attribute.
	 *
	 * @param      sfGuardRememberKey $l sfGuardRememberKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardRememberKey(sfGuardRememberKey $l)
	{
		if ($this->collsfGuardRememberKeys === null) {
			$this->initsfGuardRememberKeys();
		}
		if (!in_array($l, $this->collsfGuardRememberKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardRememberKeys, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collRecepcionPedidosRelatedByRecibeId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecepcionPedidosRelatedByRecibeId()
	 */
	public function clearRecepcionPedidosRelatedByRecibeId()
	{
		$this->collRecepcionPedidosRelatedByRecibeId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecepcionPedidosRelatedByRecibeId collection (array).
	 *
	 * By default this just sets the collRecepcionPedidosRelatedByRecibeId collection to an empty array (like clearcollRecepcionPedidosRelatedByRecibeId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecepcionPedidosRelatedByRecibeId()
	{
		$this->collRecepcionPedidosRelatedByRecibeId = array();
	}

	/**
	 * Gets an array of RecepcionPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RecepcionPedidosRelatedByRecibeId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RecepcionPedido[]
	 * @throws     PropelException
	 */
	public function getRecepcionPedidosRelatedByRecibeId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByRecibeId === null) {
			if ($this->isNew()) {
			   $this->collRecepcionPedidosRelatedByRecibeId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecepcionPedidoRelatedByRecibeIdCriteria) || !$this->lastRecepcionPedidoRelatedByRecibeIdCriteria->equals($criteria)) {
					$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecepcionPedidoRelatedByRecibeIdCriteria = $criteria;
		return $this->collRecepcionPedidosRelatedByRecibeId;
	}

	/**
	 * Returns the number of related RecepcionPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RecepcionPedido objects.
	 * @throws     PropelException
	 */
	public function countRecepcionPedidosRelatedByRecibeId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecepcionPedidosRelatedByRecibeId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				$count = RecepcionPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				if (!isset($this->lastRecepcionPedidoRelatedByRecibeIdCriteria) || !$this->lastRecepcionPedidoRelatedByRecibeIdCriteria->equals($criteria)) {
					$count = RecepcionPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRecepcionPedidosRelatedByRecibeId);
				}
			} else {
				$count = count($this->collRecepcionPedidosRelatedByRecibeId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RecepcionPedido object to this object
	 * through the RecepcionPedido foreign key attribute.
	 *
	 * @param      RecepcionPedido $l RecepcionPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecepcionPedidoRelatedByRecibeId(RecepcionPedido $l)
	{
		if ($this->collRecepcionPedidosRelatedByRecibeId === null) {
			$this->initRecepcionPedidosRelatedByRecibeId();
		}
		if (!in_array($l, $this->collRecepcionPedidosRelatedByRecibeId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecepcionPedidosRelatedByRecibeId, $l);
			$l->setsfGuardUserRelatedByRecibeId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByRecibeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByRecibeIdJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByRecibeId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByRecibeId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByRecibeIdCriteria) || !$this->lastRecepcionPedidoRelatedByRecibeIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByRecibeIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByRecibeId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByRecibeId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByRecibeIdJoinProveedor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByRecibeId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByRecibeId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

				$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::RECIBE_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByRecibeIdCriteria) || !$this->lastRecepcionPedidoRelatedByRecibeIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByRecibeId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByRecibeIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByRecibeId;
	}

	/**
	 * Clears out the collRecepcionPedidosRelatedByControlaId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecepcionPedidosRelatedByControlaId()
	 */
	public function clearRecepcionPedidosRelatedByControlaId()
	{
		$this->collRecepcionPedidosRelatedByControlaId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecepcionPedidosRelatedByControlaId collection (array).
	 *
	 * By default this just sets the collRecepcionPedidosRelatedByControlaId collection to an empty array (like clearcollRecepcionPedidosRelatedByControlaId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecepcionPedidosRelatedByControlaId()
	{
		$this->collRecepcionPedidosRelatedByControlaId = array();
	}

	/**
	 * Gets an array of RecepcionPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RecepcionPedidosRelatedByControlaId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RecepcionPedido[]
	 * @throws     PropelException
	 */
	public function getRecepcionPedidosRelatedByControlaId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
			   $this->collRecepcionPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecepcionPedidoRelatedByControlaIdCriteria) || !$this->lastRecepcionPedidoRelatedByControlaIdCriteria->equals($criteria)) {
					$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecepcionPedidoRelatedByControlaIdCriteria = $criteria;
		return $this->collRecepcionPedidosRelatedByControlaId;
	}

	/**
	 * Returns the number of related RecepcionPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RecepcionPedido objects.
	 * @throws     PropelException
	 */
	public function countRecepcionPedidosRelatedByControlaId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecepcionPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				$count = RecepcionPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				if (!isset($this->lastRecepcionPedidoRelatedByControlaIdCriteria) || !$this->lastRecepcionPedidoRelatedByControlaIdCriteria->equals($criteria)) {
					$count = RecepcionPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRecepcionPedidosRelatedByControlaId);
				}
			} else {
				$count = count($this->collRecepcionPedidosRelatedByControlaId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RecepcionPedido object to this object
	 * through the RecepcionPedido foreign key attribute.
	 *
	 * @param      RecepcionPedido $l RecepcionPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecepcionPedidoRelatedByControlaId(RecepcionPedido $l)
	{
		if ($this->collRecepcionPedidosRelatedByControlaId === null) {
			$this->initRecepcionPedidosRelatedByControlaId();
		}
		if (!in_array($l, $this->collRecepcionPedidosRelatedByControlaId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecepcionPedidosRelatedByControlaId, $l);
			$l->setsfGuardUserRelatedByControlaId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByControlaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByControlaIdJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByControlaIdCriteria) || !$this->lastRecepcionPedidoRelatedByControlaIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByControlaIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByControlaId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByControlaId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByControlaIdJoinProveedor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByControlaId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByControlaId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

				$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::CONTROLA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByControlaIdCriteria) || !$this->lastRecepcionPedidoRelatedByControlaIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByControlaId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByControlaIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByControlaId;
	}

	/**
	 * Clears out the collRecepcionPedidosRelatedByAdministraId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRecepcionPedidosRelatedByAdministraId()
	 */
	public function clearRecepcionPedidosRelatedByAdministraId()
	{
		$this->collRecepcionPedidosRelatedByAdministraId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRecepcionPedidosRelatedByAdministraId collection (array).
	 *
	 * By default this just sets the collRecepcionPedidosRelatedByAdministraId collection to an empty array (like clearcollRecepcionPedidosRelatedByAdministraId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRecepcionPedidosRelatedByAdministraId()
	{
		$this->collRecepcionPedidosRelatedByAdministraId = array();
	}

	/**
	 * Gets an array of RecepcionPedido objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related RecepcionPedidosRelatedByAdministraId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RecepcionPedido[]
	 * @throws     PropelException
	 */
	public function getRecepcionPedidosRelatedByAdministraId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
			   $this->collRecepcionPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				RecepcionPedidoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRecepcionPedidoRelatedByAdministraIdCriteria) || !$this->lastRecepcionPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
					$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRecepcionPedidoRelatedByAdministraIdCriteria = $criteria;
		return $this->collRecepcionPedidosRelatedByAdministraId;
	}

	/**
	 * Returns the number of related RecepcionPedido objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RecepcionPedido objects.
	 * @throws     PropelException
	 */
	public function countRecepcionPedidosRelatedByAdministraId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRecepcionPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				$count = RecepcionPedidoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				if (!isset($this->lastRecepcionPedidoRelatedByAdministraIdCriteria) || !$this->lastRecepcionPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
					$count = RecepcionPedidoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRecepcionPedidosRelatedByAdministraId);
				}
			} else {
				$count = count($this->collRecepcionPedidosRelatedByAdministraId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RecepcionPedido object to this object
	 * through the RecepcionPedido foreign key attribute.
	 *
	 * @param      RecepcionPedido $l RecepcionPedido
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRecepcionPedidoRelatedByAdministraId(RecepcionPedido $l)
	{
		if ($this->collRecepcionPedidosRelatedByAdministraId === null) {
			$this->initRecepcionPedidosRelatedByAdministraId();
		}
		if (!in_array($l, $this->collRecepcionPedidosRelatedByAdministraId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRecepcionPedidosRelatedByAdministraId, $l);
			$l->setsfGuardUserRelatedByAdministraId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByAdministraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByAdministraIdJoinNotaPedido($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByAdministraIdCriteria) || !$this->lastRecepcionPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelectJoinNotaPedido($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByAdministraIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByAdministraId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related RecepcionPedidosRelatedByAdministraId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getRecepcionPedidosRelatedByAdministraIdJoinProveedor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRecepcionPedidosRelatedByAdministraId === null) {
			if ($this->isNew()) {
				$this->collRecepcionPedidosRelatedByAdministraId = array();
			} else {

				$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

				$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RecepcionPedidoPeer::ADMINISTRA_ID, $this->id);

			if (!isset($this->lastRecepcionPedidoRelatedByAdministraIdCriteria) || !$this->lastRecepcionPedidoRelatedByAdministraIdCriteria->equals($criteria)) {
				$this->collRecepcionPedidosRelatedByAdministraId = RecepcionPedidoPeer::doSelectJoinProveedor($criteria, $con, $join_behavior);
			}
		}
		$this->lastRecepcionPedidoRelatedByAdministraIdCriteria = $criteria;

		return $this->collRecepcionPedidosRelatedByAdministraId;
	}

	/**
	 * Clears out the collUserProfiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserProfiles()
	 */
	public function clearUserProfiles()
	{
		$this->collUserProfiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserProfiles collection (array).
	 *
	 * By default this just sets the collUserProfiles collection to an empty array (like clearcollUserProfiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserProfiles()
	{
		$this->collUserProfiles = array();
	}

	/**
	 * Gets an array of UserProfile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related UserProfiles from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserProfile[]
	 * @throws     PropelException
	 */
	public function getUserProfiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
			   $this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				UserProfilePeer::addSelectColumns($criteria);
				$this->collUserProfiles = UserProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				UserProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
					$this->collUserProfiles = UserProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserProfileCriteria = $criteria;
		return $this->collUserProfiles;
	}

	/**
	 * Returns the number of related UserProfile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserProfile objects.
	 * @throws     PropelException
	 */
	public function countUserProfiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				$count = UserProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
					$count = UserProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserProfiles);
				}
			} else {
				$count = count($this->collUserProfiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserProfile object to this object
	 * through the UserProfile foreign key attribute.
	 *
	 * @param      UserProfile $l UserProfile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserProfile(UserProfile $l)
	{
		if ($this->collUserProfiles === null) {
			$this->initUserProfiles();
		}
		if (!in_array($l, $this->collUserProfiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserProfiles, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related UserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getUserProfilesJoinPais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				$this->collUserProfiles = UserProfilePeer::doSelectJoinPais($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserProfilePeer::USER_ID, $this->id);

			if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
				$this->collUserProfiles = UserProfilePeer::doSelectJoinPais($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserProfileCriteria = $criteria;

		return $this->collUserProfiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related UserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getUserProfilesJoinLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				$this->collUserProfiles = UserProfilePeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserProfilePeer::USER_ID, $this->id);

			if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
				$this->collUserProfiles = UserProfilePeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserProfileCriteria = $criteria;

		return $this->collUserProfiles;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related UserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getUserProfilesJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserProfiles === null) {
			if ($this->isNew()) {
				$this->collUserProfiles = array();
			} else {

				$criteria->add(UserProfilePeer::USER_ID, $this->id);

				$this->collUserProfiles = UserProfilePeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserProfilePeer::USER_ID, $this->id);

			if (!isset($this->lastUserProfileCriteria) || !$this->lastUserProfileCriteria->equals($criteria)) {
				$this->collUserProfiles = UserProfilePeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserProfileCriteria = $criteria;

		return $this->collUserProfiles;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collNotaPedidosRelatedByAdministraId) {
				foreach ((array) $this->collNotaPedidosRelatedByAdministraId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotaPedidosRelatedBySolicitaId) {
				foreach ((array) $this->collNotaPedidosRelatedBySolicitaId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotaPedidosRelatedByControlaId) {
				foreach ((array) $this->collNotaPedidosRelatedByControlaId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotaPedidosRelatedByAutorizaId) {
				foreach ((array) $this->collNotaPedidosRelatedByAutorizaId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotaPedidoEstados) {
				foreach ((array) $this->collNotaPedidoEstados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEventos) {
				foreach ((array) $this->collEventos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompraEstados) {
				foreach ((array) $this->collCompraEstados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVentas) {
				foreach ((array) $this->collVentas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVentaEstados) {
				foreach ((array) $this->collVentaEstados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserPermissions) {
				foreach ((array) $this->collsfGuardUserPermissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserGroups) {
				foreach ((array) $this->collsfGuardUserGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardRememberKeys) {
				foreach ((array) $this->collsfGuardRememberKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecepcionPedidosRelatedByRecibeId) {
				foreach ((array) $this->collRecepcionPedidosRelatedByRecibeId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecepcionPedidosRelatedByControlaId) {
				foreach ((array) $this->collRecepcionPedidosRelatedByControlaId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRecepcionPedidosRelatedByAdministraId) {
				foreach ((array) $this->collRecepcionPedidosRelatedByAdministraId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserProfiles) {
				foreach ((array) $this->collUserProfiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collNotaPedidosRelatedByAdministraId = null;
		$this->collNotaPedidosRelatedBySolicitaId = null;
		$this->collNotaPedidosRelatedByControlaId = null;
		$this->collNotaPedidosRelatedByAutorizaId = null;
		$this->collNotaPedidoEstados = null;
		$this->collEventos = null;
		$this->collCompraEstados = null;
		$this->collVentas = null;
		$this->collVentaEstados = null;
		$this->collsfGuardUserPermissions = null;
		$this->collsfGuardUserGroups = null;
		$this->collsfGuardRememberKeys = null;
		$this->collRecepcionPedidosRelatedByRecibeId = null;
		$this->collRecepcionPedidosRelatedByControlaId = null;
		$this->collRecepcionPedidosRelatedByAdministraId = null;
		$this->collUserProfiles = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasesfGuardUser:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasesfGuardUser::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasesfGuardUser
